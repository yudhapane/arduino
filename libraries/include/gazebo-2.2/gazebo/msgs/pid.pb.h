// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pid.proto

#ifndef PROTOBUF_pid_2eproto__INCLUDED
#define PROTOBUF_pid_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#pragma GCC system_header
#include <boost/shared_ptr.hpp>
#include "gazebo/msgs/MsgFactory.hh"
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_pid_2eproto();
void protobuf_AssignDesc_pid_2eproto();
void protobuf_ShutdownFile_pid_2eproto();

class PID;

// ===================================================================

class PID : public ::google::protobuf::Message {
 public:
  PID();
  virtual ~PID();

  PID(const PID& from);

  inline PID& operator=(const PID& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PID& default_instance();

  void Swap(PID* other);

  // implements Message ----------------------------------------------

  PID* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PID& from);
  void MergeFrom(const PID& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double target = 1 [default = 0];
  inline bool has_target() const;
  inline void clear_target();
  static const int kTargetFieldNumber = 1;
  inline double target() const;
  inline void set_target(double value);

  // optional double p_gain = 2 [default = 0];
  inline bool has_p_gain() const;
  inline void clear_p_gain();
  static const int kPGainFieldNumber = 2;
  inline double p_gain() const;
  inline void set_p_gain(double value);

  // optional double i_gain = 3 [default = 0];
  inline bool has_i_gain() const;
  inline void clear_i_gain();
  static const int kIGainFieldNumber = 3;
  inline double i_gain() const;
  inline void set_i_gain(double value);

  // optional double d_gain = 4 [default = 0];
  inline bool has_d_gain() const;
  inline void clear_d_gain();
  static const int kDGainFieldNumber = 4;
  inline double d_gain() const;
  inline void set_d_gain(double value);

  // optional double i_max = 5 [default = 0];
  inline bool has_i_max() const;
  inline void clear_i_max();
  static const int kIMaxFieldNumber = 5;
  inline double i_max() const;
  inline void set_i_max(double value);

  // optional double i_min = 6 [default = 0];
  inline bool has_i_min() const;
  inline void clear_i_min();
  static const int kIMinFieldNumber = 6;
  inline double i_min() const;
  inline void set_i_min(double value);

  // optional double limit = 7 [default = 0];
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 7;
  inline double limit() const;
  inline void set_limit(double value);

  // @@protoc_insertion_point(class_scope:gazebo.msgs.PID)
 private:
  inline void set_has_target();
  inline void clear_has_target();
  inline void set_has_p_gain();
  inline void clear_has_p_gain();
  inline void set_has_i_gain();
  inline void clear_has_i_gain();
  inline void set_has_d_gain();
  inline void clear_has_d_gain();
  inline void set_has_i_max();
  inline void clear_has_i_max();
  inline void set_has_i_min();
  inline void clear_has_i_min();
  inline void set_has_limit();
  inline void clear_has_limit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double target_;
  double p_gain_;
  double i_gain_;
  double d_gain_;
  double i_max_;
  double i_min_;
  double limit_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_pid_2eproto();
  friend void protobuf_AssignDesc_pid_2eproto();
  friend void protobuf_ShutdownFile_pid_2eproto();

  void InitAsDefaultInstance();
  static PID* default_instance_;
};
// ===================================================================


// ===================================================================

// PID

// optional double target = 1 [default = 0];
inline bool PID::has_target() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PID::set_has_target() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PID::clear_has_target() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PID::clear_target() {
  target_ = 0;
  clear_has_target();
}
inline double PID::target() const {
  return target_;
}
inline void PID::set_target(double value) {
  set_has_target();
  target_ = value;
}

// optional double p_gain = 2 [default = 0];
inline bool PID::has_p_gain() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PID::set_has_p_gain() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PID::clear_has_p_gain() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PID::clear_p_gain() {
  p_gain_ = 0;
  clear_has_p_gain();
}
inline double PID::p_gain() const {
  return p_gain_;
}
inline void PID::set_p_gain(double value) {
  set_has_p_gain();
  p_gain_ = value;
}

// optional double i_gain = 3 [default = 0];
inline bool PID::has_i_gain() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PID::set_has_i_gain() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PID::clear_has_i_gain() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PID::clear_i_gain() {
  i_gain_ = 0;
  clear_has_i_gain();
}
inline double PID::i_gain() const {
  return i_gain_;
}
inline void PID::set_i_gain(double value) {
  set_has_i_gain();
  i_gain_ = value;
}

// optional double d_gain = 4 [default = 0];
inline bool PID::has_d_gain() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PID::set_has_d_gain() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PID::clear_has_d_gain() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PID::clear_d_gain() {
  d_gain_ = 0;
  clear_has_d_gain();
}
inline double PID::d_gain() const {
  return d_gain_;
}
inline void PID::set_d_gain(double value) {
  set_has_d_gain();
  d_gain_ = value;
}

// optional double i_max = 5 [default = 0];
inline bool PID::has_i_max() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PID::set_has_i_max() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PID::clear_has_i_max() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PID::clear_i_max() {
  i_max_ = 0;
  clear_has_i_max();
}
inline double PID::i_max() const {
  return i_max_;
}
inline void PID::set_i_max(double value) {
  set_has_i_max();
  i_max_ = value;
}

// optional double i_min = 6 [default = 0];
inline bool PID::has_i_min() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PID::set_has_i_min() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PID::clear_has_i_min() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PID::clear_i_min() {
  i_min_ = 0;
  clear_has_i_min();
}
inline double PID::i_min() const {
  return i_min_;
}
inline void PID::set_i_min(double value) {
  set_has_i_min();
  i_min_ = value;
}

// optional double limit = 7 [default = 0];
inline bool PID::has_limit() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PID::set_has_limit() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PID::clear_has_limit() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PID::clear_limit() {
  limit_ = 0;
  clear_has_limit();
}
inline double PID::limit() const {
  return limit_;
}
inline void PID::set_limit(double value) {
  set_has_limit();
  limit_ = value;
}


typedef boost::shared_ptr<gazebo::msgs::PID> PIDPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

typedef const boost::shared_ptr<gazebo::msgs::PID const> ConstPIDPtr;
// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pid_2eproto__INCLUDED
