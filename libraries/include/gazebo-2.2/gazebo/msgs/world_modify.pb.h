// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: world_modify.proto

#ifndef PROTOBUF_world_5fmodify_2eproto__INCLUDED
#define PROTOBUF_world_5fmodify_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#pragma GCC system_header
#include <boost/shared_ptr.hpp>
#include "gazebo/msgs/MsgFactory.hh"
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_world_5fmodify_2eproto();
void protobuf_AssignDesc_world_5fmodify_2eproto();
void protobuf_ShutdownFile_world_5fmodify_2eproto();

class WorldModify;

// ===================================================================

class WorldModify : public ::google::protobuf::Message {
 public:
  WorldModify();
  virtual ~WorldModify();

  WorldModify(const WorldModify& from);

  inline WorldModify& operator=(const WorldModify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WorldModify& default_instance();

  void Swap(WorldModify* other);

  // implements Message ----------------------------------------------

  WorldModify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorldModify& from);
  void MergeFrom(const WorldModify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string world_name = 1;
  inline bool has_world_name() const;
  inline void clear_world_name();
  static const int kWorldNameFieldNumber = 1;
  inline const ::std::string& world_name() const;
  inline void set_world_name(const ::std::string& value);
  inline void set_world_name(const char* value);
  inline void set_world_name(const char* value, size_t size);
  inline ::std::string* mutable_world_name();
  inline ::std::string* release_world_name();
  inline void set_allocated_world_name(::std::string* world_name);

  // optional bool remove = 2;
  inline bool has_remove() const;
  inline void clear_remove();
  static const int kRemoveFieldNumber = 2;
  inline bool remove() const;
  inline void set_remove(bool value);

  // optional bool create = 3;
  inline bool has_create() const;
  inline void clear_create();
  static const int kCreateFieldNumber = 3;
  inline bool create() const;
  inline void set_create(bool value);

  // @@protoc_insertion_point(class_scope:gazebo.msgs.WorldModify)
 private:
  inline void set_has_world_name();
  inline void clear_has_world_name();
  inline void set_has_remove();
  inline void clear_has_remove();
  inline void set_has_create();
  inline void clear_has_create();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* world_name_;
  bool remove_;
  bool create_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_world_5fmodify_2eproto();
  friend void protobuf_AssignDesc_world_5fmodify_2eproto();
  friend void protobuf_ShutdownFile_world_5fmodify_2eproto();

  void InitAsDefaultInstance();
  static WorldModify* default_instance_;
};
// ===================================================================


// ===================================================================

// WorldModify

// required string world_name = 1;
inline bool WorldModify::has_world_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WorldModify::set_has_world_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WorldModify::clear_has_world_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WorldModify::clear_world_name() {
  if (world_name_ != &::google::protobuf::internal::kEmptyString) {
    world_name_->clear();
  }
  clear_has_world_name();
}
inline const ::std::string& WorldModify::world_name() const {
  return *world_name_;
}
inline void WorldModify::set_world_name(const ::std::string& value) {
  set_has_world_name();
  if (world_name_ == &::google::protobuf::internal::kEmptyString) {
    world_name_ = new ::std::string;
  }
  world_name_->assign(value);
}
inline void WorldModify::set_world_name(const char* value) {
  set_has_world_name();
  if (world_name_ == &::google::protobuf::internal::kEmptyString) {
    world_name_ = new ::std::string;
  }
  world_name_->assign(value);
}
inline void WorldModify::set_world_name(const char* value, size_t size) {
  set_has_world_name();
  if (world_name_ == &::google::protobuf::internal::kEmptyString) {
    world_name_ = new ::std::string;
  }
  world_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WorldModify::mutable_world_name() {
  set_has_world_name();
  if (world_name_ == &::google::protobuf::internal::kEmptyString) {
    world_name_ = new ::std::string;
  }
  return world_name_;
}
inline ::std::string* WorldModify::release_world_name() {
  clear_has_world_name();
  if (world_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = world_name_;
    world_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void WorldModify::set_allocated_world_name(::std::string* world_name) {
  if (world_name_ != &::google::protobuf::internal::kEmptyString) {
    delete world_name_;
  }
  if (world_name) {
    set_has_world_name();
    world_name_ = world_name;
  } else {
    clear_has_world_name();
    world_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool remove = 2;
inline bool WorldModify::has_remove() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WorldModify::set_has_remove() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WorldModify::clear_has_remove() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WorldModify::clear_remove() {
  remove_ = false;
  clear_has_remove();
}
inline bool WorldModify::remove() const {
  return remove_;
}
inline void WorldModify::set_remove(bool value) {
  set_has_remove();
  remove_ = value;
}

// optional bool create = 3;
inline bool WorldModify::has_create() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WorldModify::set_has_create() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WorldModify::clear_has_create() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WorldModify::clear_create() {
  create_ = false;
  clear_has_create();
}
inline bool WorldModify::create() const {
  return create_;
}
inline void WorldModify::set_create(bool value) {
  set_has_create();
  create_ = value;
}


typedef boost::shared_ptr<gazebo::msgs::WorldModify> WorldModifyPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

typedef const boost::shared_ptr<gazebo::msgs::WorldModify const> ConstWorldModifyPtr;
// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_world_5fmodify_2eproto__INCLUDED
