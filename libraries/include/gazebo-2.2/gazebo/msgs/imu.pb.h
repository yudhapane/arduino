// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: imu.proto

#ifndef PROTOBUF_imu_2eproto__INCLUDED
#define PROTOBUF_imu_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "time.pb.h"
#include "vector3d.pb.h"
#include "quaternion.pb.h"
#pragma GCC system_header
#include <boost/shared_ptr.hpp>
#include "gazebo/msgs/MsgFactory.hh"
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_imu_2eproto();
void protobuf_AssignDesc_imu_2eproto();
void protobuf_ShutdownFile_imu_2eproto();

class IMU;

// ===================================================================

class IMU : public ::google::protobuf::Message {
 public:
  IMU();
  virtual ~IMU();

  IMU(const IMU& from);

  inline IMU& operator=(const IMU& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IMU& default_instance();

  void Swap(IMU* other);

  // implements Message ----------------------------------------------

  IMU* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IMU& from);
  void MergeFrom(const IMU& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .gazebo.msgs.Time stamp = 1;
  inline bool has_stamp() const;
  inline void clear_stamp();
  static const int kStampFieldNumber = 1;
  inline const ::gazebo::msgs::Time& stamp() const;
  inline ::gazebo::msgs::Time* mutable_stamp();
  inline ::gazebo::msgs::Time* release_stamp();
  inline void set_allocated_stamp(::gazebo::msgs::Time* stamp);

  // required string entity_name = 2;
  inline bool has_entity_name() const;
  inline void clear_entity_name();
  static const int kEntityNameFieldNumber = 2;
  inline const ::std::string& entity_name() const;
  inline void set_entity_name(const ::std::string& value);
  inline void set_entity_name(const char* value);
  inline void set_entity_name(const char* value, size_t size);
  inline ::std::string* mutable_entity_name();
  inline ::std::string* release_entity_name();
  inline void set_allocated_entity_name(::std::string* entity_name);

  // required .gazebo.msgs.Quaternion orientation = 3;
  inline bool has_orientation() const;
  inline void clear_orientation();
  static const int kOrientationFieldNumber = 3;
  inline const ::gazebo::msgs::Quaternion& orientation() const;
  inline ::gazebo::msgs::Quaternion* mutable_orientation();
  inline ::gazebo::msgs::Quaternion* release_orientation();
  inline void set_allocated_orientation(::gazebo::msgs::Quaternion* orientation);

  // required .gazebo.msgs.Vector3d angular_velocity = 4;
  inline bool has_angular_velocity() const;
  inline void clear_angular_velocity();
  static const int kAngularVelocityFieldNumber = 4;
  inline const ::gazebo::msgs::Vector3d& angular_velocity() const;
  inline ::gazebo::msgs::Vector3d* mutable_angular_velocity();
  inline ::gazebo::msgs::Vector3d* release_angular_velocity();
  inline void set_allocated_angular_velocity(::gazebo::msgs::Vector3d* angular_velocity);

  // required .gazebo.msgs.Vector3d linear_acceleration = 5;
  inline bool has_linear_acceleration() const;
  inline void clear_linear_acceleration();
  static const int kLinearAccelerationFieldNumber = 5;
  inline const ::gazebo::msgs::Vector3d& linear_acceleration() const;
  inline ::gazebo::msgs::Vector3d* mutable_linear_acceleration();
  inline ::gazebo::msgs::Vector3d* release_linear_acceleration();
  inline void set_allocated_linear_acceleration(::gazebo::msgs::Vector3d* linear_acceleration);

  // @@protoc_insertion_point(class_scope:gazebo.msgs.IMU)
 private:
  inline void set_has_stamp();
  inline void clear_has_stamp();
  inline void set_has_entity_name();
  inline void clear_has_entity_name();
  inline void set_has_orientation();
  inline void clear_has_orientation();
  inline void set_has_angular_velocity();
  inline void clear_has_angular_velocity();
  inline void set_has_linear_acceleration();
  inline void clear_has_linear_acceleration();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::gazebo::msgs::Time* stamp_;
  ::std::string* entity_name_;
  ::gazebo::msgs::Quaternion* orientation_;
  ::gazebo::msgs::Vector3d* angular_velocity_;
  ::gazebo::msgs::Vector3d* linear_acceleration_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_imu_2eproto();
  friend void protobuf_AssignDesc_imu_2eproto();
  friend void protobuf_ShutdownFile_imu_2eproto();

  void InitAsDefaultInstance();
  static IMU* default_instance_;
};
// ===================================================================


// ===================================================================

// IMU

// required .gazebo.msgs.Time stamp = 1;
inline bool IMU::has_stamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMU::set_has_stamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMU::clear_has_stamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMU::clear_stamp() {
  if (stamp_ != NULL) stamp_->::gazebo::msgs::Time::Clear();
  clear_has_stamp();
}
inline const ::gazebo::msgs::Time& IMU::stamp() const {
  return stamp_ != NULL ? *stamp_ : *default_instance_->stamp_;
}
inline ::gazebo::msgs::Time* IMU::mutable_stamp() {
  set_has_stamp();
  if (stamp_ == NULL) stamp_ = new ::gazebo::msgs::Time;
  return stamp_;
}
inline ::gazebo::msgs::Time* IMU::release_stamp() {
  clear_has_stamp();
  ::gazebo::msgs::Time* temp = stamp_;
  stamp_ = NULL;
  return temp;
}
inline void IMU::set_allocated_stamp(::gazebo::msgs::Time* stamp) {
  delete stamp_;
  stamp_ = stamp;
  if (stamp) {
    set_has_stamp();
  } else {
    clear_has_stamp();
  }
}

// required string entity_name = 2;
inline bool IMU::has_entity_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMU::set_has_entity_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMU::clear_has_entity_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMU::clear_entity_name() {
  if (entity_name_ != &::google::protobuf::internal::kEmptyString) {
    entity_name_->clear();
  }
  clear_has_entity_name();
}
inline const ::std::string& IMU::entity_name() const {
  return *entity_name_;
}
inline void IMU::set_entity_name(const ::std::string& value) {
  set_has_entity_name();
  if (entity_name_ == &::google::protobuf::internal::kEmptyString) {
    entity_name_ = new ::std::string;
  }
  entity_name_->assign(value);
}
inline void IMU::set_entity_name(const char* value) {
  set_has_entity_name();
  if (entity_name_ == &::google::protobuf::internal::kEmptyString) {
    entity_name_ = new ::std::string;
  }
  entity_name_->assign(value);
}
inline void IMU::set_entity_name(const char* value, size_t size) {
  set_has_entity_name();
  if (entity_name_ == &::google::protobuf::internal::kEmptyString) {
    entity_name_ = new ::std::string;
  }
  entity_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IMU::mutable_entity_name() {
  set_has_entity_name();
  if (entity_name_ == &::google::protobuf::internal::kEmptyString) {
    entity_name_ = new ::std::string;
  }
  return entity_name_;
}
inline ::std::string* IMU::release_entity_name() {
  clear_has_entity_name();
  if (entity_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = entity_name_;
    entity_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void IMU::set_allocated_entity_name(::std::string* entity_name) {
  if (entity_name_ != &::google::protobuf::internal::kEmptyString) {
    delete entity_name_;
  }
  if (entity_name) {
    set_has_entity_name();
    entity_name_ = entity_name;
  } else {
    clear_has_entity_name();
    entity_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .gazebo.msgs.Quaternion orientation = 3;
inline bool IMU::has_orientation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMU::set_has_orientation() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMU::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMU::clear_orientation() {
  if (orientation_ != NULL) orientation_->::gazebo::msgs::Quaternion::Clear();
  clear_has_orientation();
}
inline const ::gazebo::msgs::Quaternion& IMU::orientation() const {
  return orientation_ != NULL ? *orientation_ : *default_instance_->orientation_;
}
inline ::gazebo::msgs::Quaternion* IMU::mutable_orientation() {
  set_has_orientation();
  if (orientation_ == NULL) orientation_ = new ::gazebo::msgs::Quaternion;
  return orientation_;
}
inline ::gazebo::msgs::Quaternion* IMU::release_orientation() {
  clear_has_orientation();
  ::gazebo::msgs::Quaternion* temp = orientation_;
  orientation_ = NULL;
  return temp;
}
inline void IMU::set_allocated_orientation(::gazebo::msgs::Quaternion* orientation) {
  delete orientation_;
  orientation_ = orientation;
  if (orientation) {
    set_has_orientation();
  } else {
    clear_has_orientation();
  }
}

// required .gazebo.msgs.Vector3d angular_velocity = 4;
inline bool IMU::has_angular_velocity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMU::set_has_angular_velocity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMU::clear_has_angular_velocity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMU::clear_angular_velocity() {
  if (angular_velocity_ != NULL) angular_velocity_->::gazebo::msgs::Vector3d::Clear();
  clear_has_angular_velocity();
}
inline const ::gazebo::msgs::Vector3d& IMU::angular_velocity() const {
  return angular_velocity_ != NULL ? *angular_velocity_ : *default_instance_->angular_velocity_;
}
inline ::gazebo::msgs::Vector3d* IMU::mutable_angular_velocity() {
  set_has_angular_velocity();
  if (angular_velocity_ == NULL) angular_velocity_ = new ::gazebo::msgs::Vector3d;
  return angular_velocity_;
}
inline ::gazebo::msgs::Vector3d* IMU::release_angular_velocity() {
  clear_has_angular_velocity();
  ::gazebo::msgs::Vector3d* temp = angular_velocity_;
  angular_velocity_ = NULL;
  return temp;
}
inline void IMU::set_allocated_angular_velocity(::gazebo::msgs::Vector3d* angular_velocity) {
  delete angular_velocity_;
  angular_velocity_ = angular_velocity;
  if (angular_velocity) {
    set_has_angular_velocity();
  } else {
    clear_has_angular_velocity();
  }
}

// required .gazebo.msgs.Vector3d linear_acceleration = 5;
inline bool IMU::has_linear_acceleration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMU::set_has_linear_acceleration() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMU::clear_has_linear_acceleration() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMU::clear_linear_acceleration() {
  if (linear_acceleration_ != NULL) linear_acceleration_->::gazebo::msgs::Vector3d::Clear();
  clear_has_linear_acceleration();
}
inline const ::gazebo::msgs::Vector3d& IMU::linear_acceleration() const {
  return linear_acceleration_ != NULL ? *linear_acceleration_ : *default_instance_->linear_acceleration_;
}
inline ::gazebo::msgs::Vector3d* IMU::mutable_linear_acceleration() {
  set_has_linear_acceleration();
  if (linear_acceleration_ == NULL) linear_acceleration_ = new ::gazebo::msgs::Vector3d;
  return linear_acceleration_;
}
inline ::gazebo::msgs::Vector3d* IMU::release_linear_acceleration() {
  clear_has_linear_acceleration();
  ::gazebo::msgs::Vector3d* temp = linear_acceleration_;
  linear_acceleration_ = NULL;
  return temp;
}
inline void IMU::set_allocated_linear_acceleration(::gazebo::msgs::Vector3d* linear_acceleration) {
  delete linear_acceleration_;
  linear_acceleration_ = linear_acceleration;
  if (linear_acceleration) {
    set_has_linear_acceleration();
  } else {
    clear_has_linear_acceleration();
  }
}


typedef boost::shared_ptr<gazebo::msgs::IMU> IMUPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

typedef const boost::shared_ptr<gazebo::msgs::IMU const> ConstIMUPtr;
// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_imu_2eproto__INCLUDED
