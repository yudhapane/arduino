// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: diagnostics.proto

#ifndef PROTOBUF_diagnostics_2eproto__INCLUDED
#define PROTOBUF_diagnostics_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "time.pb.h"
#pragma GCC system_header
#include <boost/shared_ptr.hpp>
#include "gazebo/msgs/MsgFactory.hh"
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_diagnostics_2eproto();
void protobuf_AssignDesc_diagnostics_2eproto();
void protobuf_ShutdownFile_diagnostics_2eproto();

class Diagnostics;
class Diagnostics_DiagTime;

// ===================================================================

class Diagnostics_DiagTime : public ::google::protobuf::Message {
 public:
  Diagnostics_DiagTime();
  virtual ~Diagnostics_DiagTime();

  Diagnostics_DiagTime(const Diagnostics_DiagTime& from);

  inline Diagnostics_DiagTime& operator=(const Diagnostics_DiagTime& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Diagnostics_DiagTime& default_instance();

  void Swap(Diagnostics_DiagTime* other);

  // implements Message ----------------------------------------------

  Diagnostics_DiagTime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Diagnostics_DiagTime& from);
  void MergeFrom(const Diagnostics_DiagTime& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required .gazebo.msgs.Time elapsed = 2;
  inline bool has_elapsed() const;
  inline void clear_elapsed();
  static const int kElapsedFieldNumber = 2;
  inline const ::gazebo::msgs::Time& elapsed() const;
  inline ::gazebo::msgs::Time* mutable_elapsed();
  inline ::gazebo::msgs::Time* release_elapsed();
  inline void set_allocated_elapsed(::gazebo::msgs::Time* elapsed);

  // required .gazebo.msgs.Time wall = 3;
  inline bool has_wall() const;
  inline void clear_wall();
  static const int kWallFieldNumber = 3;
  inline const ::gazebo::msgs::Time& wall() const;
  inline ::gazebo::msgs::Time* mutable_wall();
  inline ::gazebo::msgs::Time* release_wall();
  inline void set_allocated_wall(::gazebo::msgs::Time* wall);

  // @@protoc_insertion_point(class_scope:gazebo.msgs.Diagnostics.DiagTime)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_elapsed();
  inline void clear_has_elapsed();
  inline void set_has_wall();
  inline void clear_has_wall();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::gazebo::msgs::Time* elapsed_;
  ::gazebo::msgs::Time* wall_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_diagnostics_2eproto();
  friend void protobuf_AssignDesc_diagnostics_2eproto();
  friend void protobuf_ShutdownFile_diagnostics_2eproto();

  void InitAsDefaultInstance();
  static Diagnostics_DiagTime* default_instance_;
};
// -------------------------------------------------------------------

class Diagnostics : public ::google::protobuf::Message {
 public:
  Diagnostics();
  virtual ~Diagnostics();

  Diagnostics(const Diagnostics& from);

  inline Diagnostics& operator=(const Diagnostics& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Diagnostics& default_instance();

  void Swap(Diagnostics* other);

  // implements Message ----------------------------------------------

  Diagnostics* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Diagnostics& from);
  void MergeFrom(const Diagnostics& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Diagnostics_DiagTime DiagTime;

  // accessors -------------------------------------------------------

  // repeated .gazebo.msgs.Diagnostics.DiagTime time = 1;
  inline int time_size() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline const ::gazebo::msgs::Diagnostics_DiagTime& time(int index) const;
  inline ::gazebo::msgs::Diagnostics_DiagTime* mutable_time(int index);
  inline ::gazebo::msgs::Diagnostics_DiagTime* add_time();
  inline const ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::Diagnostics_DiagTime >&
      time() const;
  inline ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::Diagnostics_DiagTime >*
      mutable_time();

  // required .gazebo.msgs.Time real_time = 2;
  inline bool has_real_time() const;
  inline void clear_real_time();
  static const int kRealTimeFieldNumber = 2;
  inline const ::gazebo::msgs::Time& real_time() const;
  inline ::gazebo::msgs::Time* mutable_real_time();
  inline ::gazebo::msgs::Time* release_real_time();
  inline void set_allocated_real_time(::gazebo::msgs::Time* real_time);

  // required .gazebo.msgs.Time sim_time = 3;
  inline bool has_sim_time() const;
  inline void clear_sim_time();
  static const int kSimTimeFieldNumber = 3;
  inline const ::gazebo::msgs::Time& sim_time() const;
  inline ::gazebo::msgs::Time* mutable_sim_time();
  inline ::gazebo::msgs::Time* release_sim_time();
  inline void set_allocated_sim_time(::gazebo::msgs::Time* sim_time);

  // required double real_time_factor = 4;
  inline bool has_real_time_factor() const;
  inline void clear_real_time_factor();
  static const int kRealTimeFactorFieldNumber = 4;
  inline double real_time_factor() const;
  inline void set_real_time_factor(double value);

  // @@protoc_insertion_point(class_scope:gazebo.msgs.Diagnostics)
 private:
  inline void set_has_real_time();
  inline void clear_has_real_time();
  inline void set_has_sim_time();
  inline void clear_has_sim_time();
  inline void set_has_real_time_factor();
  inline void clear_has_real_time_factor();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::Diagnostics_DiagTime > time_;
  ::gazebo::msgs::Time* real_time_;
  ::gazebo::msgs::Time* sim_time_;
  double real_time_factor_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_diagnostics_2eproto();
  friend void protobuf_AssignDesc_diagnostics_2eproto();
  friend void protobuf_ShutdownFile_diagnostics_2eproto();

  void InitAsDefaultInstance();
  static Diagnostics* default_instance_;
};
// ===================================================================


// ===================================================================

// Diagnostics_DiagTime

// required string name = 1;
inline bool Diagnostics_DiagTime::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Diagnostics_DiagTime::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Diagnostics_DiagTime::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Diagnostics_DiagTime::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Diagnostics_DiagTime::name() const {
  return *name_;
}
inline void Diagnostics_DiagTime::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Diagnostics_DiagTime::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Diagnostics_DiagTime::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Diagnostics_DiagTime::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Diagnostics_DiagTime::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Diagnostics_DiagTime::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .gazebo.msgs.Time elapsed = 2;
inline bool Diagnostics_DiagTime::has_elapsed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Diagnostics_DiagTime::set_has_elapsed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Diagnostics_DiagTime::clear_has_elapsed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Diagnostics_DiagTime::clear_elapsed() {
  if (elapsed_ != NULL) elapsed_->::gazebo::msgs::Time::Clear();
  clear_has_elapsed();
}
inline const ::gazebo::msgs::Time& Diagnostics_DiagTime::elapsed() const {
  return elapsed_ != NULL ? *elapsed_ : *default_instance_->elapsed_;
}
inline ::gazebo::msgs::Time* Diagnostics_DiagTime::mutable_elapsed() {
  set_has_elapsed();
  if (elapsed_ == NULL) elapsed_ = new ::gazebo::msgs::Time;
  return elapsed_;
}
inline ::gazebo::msgs::Time* Diagnostics_DiagTime::release_elapsed() {
  clear_has_elapsed();
  ::gazebo::msgs::Time* temp = elapsed_;
  elapsed_ = NULL;
  return temp;
}
inline void Diagnostics_DiagTime::set_allocated_elapsed(::gazebo::msgs::Time* elapsed) {
  delete elapsed_;
  elapsed_ = elapsed;
  if (elapsed) {
    set_has_elapsed();
  } else {
    clear_has_elapsed();
  }
}

// required .gazebo.msgs.Time wall = 3;
inline bool Diagnostics_DiagTime::has_wall() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Diagnostics_DiagTime::set_has_wall() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Diagnostics_DiagTime::clear_has_wall() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Diagnostics_DiagTime::clear_wall() {
  if (wall_ != NULL) wall_->::gazebo::msgs::Time::Clear();
  clear_has_wall();
}
inline const ::gazebo::msgs::Time& Diagnostics_DiagTime::wall() const {
  return wall_ != NULL ? *wall_ : *default_instance_->wall_;
}
inline ::gazebo::msgs::Time* Diagnostics_DiagTime::mutable_wall() {
  set_has_wall();
  if (wall_ == NULL) wall_ = new ::gazebo::msgs::Time;
  return wall_;
}
inline ::gazebo::msgs::Time* Diagnostics_DiagTime::release_wall() {
  clear_has_wall();
  ::gazebo::msgs::Time* temp = wall_;
  wall_ = NULL;
  return temp;
}
inline void Diagnostics_DiagTime::set_allocated_wall(::gazebo::msgs::Time* wall) {
  delete wall_;
  wall_ = wall;
  if (wall) {
    set_has_wall();
  } else {
    clear_has_wall();
  }
}

// -------------------------------------------------------------------

// Diagnostics

// repeated .gazebo.msgs.Diagnostics.DiagTime time = 1;
inline int Diagnostics::time_size() const {
  return time_.size();
}
inline void Diagnostics::clear_time() {
  time_.Clear();
}
inline const ::gazebo::msgs::Diagnostics_DiagTime& Diagnostics::time(int index) const {
  return time_.Get(index);
}
inline ::gazebo::msgs::Diagnostics_DiagTime* Diagnostics::mutable_time(int index) {
  return time_.Mutable(index);
}
inline ::gazebo::msgs::Diagnostics_DiagTime* Diagnostics::add_time() {
  return time_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::Diagnostics_DiagTime >&
Diagnostics::time() const {
  return time_;
}
inline ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::Diagnostics_DiagTime >*
Diagnostics::mutable_time() {
  return &time_;
}

// required .gazebo.msgs.Time real_time = 2;
inline bool Diagnostics::has_real_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Diagnostics::set_has_real_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Diagnostics::clear_has_real_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Diagnostics::clear_real_time() {
  if (real_time_ != NULL) real_time_->::gazebo::msgs::Time::Clear();
  clear_has_real_time();
}
inline const ::gazebo::msgs::Time& Diagnostics::real_time() const {
  return real_time_ != NULL ? *real_time_ : *default_instance_->real_time_;
}
inline ::gazebo::msgs::Time* Diagnostics::mutable_real_time() {
  set_has_real_time();
  if (real_time_ == NULL) real_time_ = new ::gazebo::msgs::Time;
  return real_time_;
}
inline ::gazebo::msgs::Time* Diagnostics::release_real_time() {
  clear_has_real_time();
  ::gazebo::msgs::Time* temp = real_time_;
  real_time_ = NULL;
  return temp;
}
inline void Diagnostics::set_allocated_real_time(::gazebo::msgs::Time* real_time) {
  delete real_time_;
  real_time_ = real_time;
  if (real_time) {
    set_has_real_time();
  } else {
    clear_has_real_time();
  }
}

// required .gazebo.msgs.Time sim_time = 3;
inline bool Diagnostics::has_sim_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Diagnostics::set_has_sim_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Diagnostics::clear_has_sim_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Diagnostics::clear_sim_time() {
  if (sim_time_ != NULL) sim_time_->::gazebo::msgs::Time::Clear();
  clear_has_sim_time();
}
inline const ::gazebo::msgs::Time& Diagnostics::sim_time() const {
  return sim_time_ != NULL ? *sim_time_ : *default_instance_->sim_time_;
}
inline ::gazebo::msgs::Time* Diagnostics::mutable_sim_time() {
  set_has_sim_time();
  if (sim_time_ == NULL) sim_time_ = new ::gazebo::msgs::Time;
  return sim_time_;
}
inline ::gazebo::msgs::Time* Diagnostics::release_sim_time() {
  clear_has_sim_time();
  ::gazebo::msgs::Time* temp = sim_time_;
  sim_time_ = NULL;
  return temp;
}
inline void Diagnostics::set_allocated_sim_time(::gazebo::msgs::Time* sim_time) {
  delete sim_time_;
  sim_time_ = sim_time;
  if (sim_time) {
    set_has_sim_time();
  } else {
    clear_has_sim_time();
  }
}

// required double real_time_factor = 4;
inline bool Diagnostics::has_real_time_factor() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Diagnostics::set_has_real_time_factor() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Diagnostics::clear_has_real_time_factor() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Diagnostics::clear_real_time_factor() {
  real_time_factor_ = 0;
  clear_has_real_time_factor();
}
inline double Diagnostics::real_time_factor() const {
  return real_time_factor_;
}
inline void Diagnostics::set_real_time_factor(double value) {
  set_has_real_time_factor();
  real_time_factor_ = value;
}


typedef boost::shared_ptr<gazebo::msgs::Diagnostics> DiagnosticsPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

typedef const boost::shared_ptr<gazebo::msgs::Diagnostics const> ConstDiagnosticsPtr;
// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_diagnostics_2eproto__INCLUDED
