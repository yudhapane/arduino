// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: response.proto

#ifndef PROTOBUF_response_2eproto__INCLUDED
#define PROTOBUF_response_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#pragma GCC system_header
#include <boost/shared_ptr.hpp>
#include "gazebo/msgs/MsgFactory.hh"
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_response_2eproto();
void protobuf_AssignDesc_response_2eproto();
void protobuf_ShutdownFile_response_2eproto();

class Response;

// ===================================================================

class Response : public ::google::protobuf::Message {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  void Swap(Response* other);

  // implements Message ----------------------------------------------

  Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string request = 2;
  inline bool has_request() const;
  inline void clear_request();
  static const int kRequestFieldNumber = 2;
  inline const ::std::string& request() const;
  inline void set_request(const ::std::string& value);
  inline void set_request(const char* value);
  inline void set_request(const char* value, size_t size);
  inline ::std::string* mutable_request();
  inline ::std::string* release_request();
  inline void set_allocated_request(::std::string* request);

  // required string response = 3;
  inline bool has_response() const;
  inline void clear_response();
  static const int kResponseFieldNumber = 3;
  inline const ::std::string& response() const;
  inline void set_response(const ::std::string& value);
  inline void set_response(const char* value);
  inline void set_response(const char* value, size_t size);
  inline ::std::string* mutable_response();
  inline ::std::string* release_response();
  inline void set_allocated_response(::std::string* response);

  // optional string type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // optional bytes serialized_data = 5;
  inline bool has_serialized_data() const;
  inline void clear_serialized_data();
  static const int kSerializedDataFieldNumber = 5;
  inline const ::std::string& serialized_data() const;
  inline void set_serialized_data(const ::std::string& value);
  inline void set_serialized_data(const char* value);
  inline void set_serialized_data(const void* value, size_t size);
  inline ::std::string* mutable_serialized_data();
  inline ::std::string* release_serialized_data();
  inline void set_allocated_serialized_data(::std::string* serialized_data);

  // @@protoc_insertion_point(class_scope:gazebo.msgs.Response)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_request();
  inline void clear_has_request();
  inline void set_has_response();
  inline void clear_has_response();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_serialized_data();
  inline void clear_has_serialized_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* request_;
  ::std::string* response_;
  ::std::string* type_;
  ::std::string* serialized_data_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_response_2eproto();
  friend void protobuf_AssignDesc_response_2eproto();
  friend void protobuf_ShutdownFile_response_2eproto();

  void InitAsDefaultInstance();
  static Response* default_instance_;
};
// ===================================================================


// ===================================================================

// Response

// required int32 id = 1;
inline bool Response::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Response::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Response::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Response::id() const {
  return id_;
}
inline void Response::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required string request = 2;
inline bool Response::has_request() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Response::set_has_request() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Response::clear_has_request() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Response::clear_request() {
  if (request_ != &::google::protobuf::internal::kEmptyString) {
    request_->clear();
  }
  clear_has_request();
}
inline const ::std::string& Response::request() const {
  return *request_;
}
inline void Response::set_request(const ::std::string& value) {
  set_has_request();
  if (request_ == &::google::protobuf::internal::kEmptyString) {
    request_ = new ::std::string;
  }
  request_->assign(value);
}
inline void Response::set_request(const char* value) {
  set_has_request();
  if (request_ == &::google::protobuf::internal::kEmptyString) {
    request_ = new ::std::string;
  }
  request_->assign(value);
}
inline void Response::set_request(const char* value, size_t size) {
  set_has_request();
  if (request_ == &::google::protobuf::internal::kEmptyString) {
    request_ = new ::std::string;
  }
  request_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Response::mutable_request() {
  set_has_request();
  if (request_ == &::google::protobuf::internal::kEmptyString) {
    request_ = new ::std::string;
  }
  return request_;
}
inline ::std::string* Response::release_request() {
  clear_has_request();
  if (request_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = request_;
    request_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Response::set_allocated_request(::std::string* request) {
  if (request_ != &::google::protobuf::internal::kEmptyString) {
    delete request_;
  }
  if (request) {
    set_has_request();
    request_ = request;
  } else {
    clear_has_request();
    request_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string response = 3;
inline bool Response::has_response() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Response::set_has_response() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Response::clear_has_response() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Response::clear_response() {
  if (response_ != &::google::protobuf::internal::kEmptyString) {
    response_->clear();
  }
  clear_has_response();
}
inline const ::std::string& Response::response() const {
  return *response_;
}
inline void Response::set_response(const ::std::string& value) {
  set_has_response();
  if (response_ == &::google::protobuf::internal::kEmptyString) {
    response_ = new ::std::string;
  }
  response_->assign(value);
}
inline void Response::set_response(const char* value) {
  set_has_response();
  if (response_ == &::google::protobuf::internal::kEmptyString) {
    response_ = new ::std::string;
  }
  response_->assign(value);
}
inline void Response::set_response(const char* value, size_t size) {
  set_has_response();
  if (response_ == &::google::protobuf::internal::kEmptyString) {
    response_ = new ::std::string;
  }
  response_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Response::mutable_response() {
  set_has_response();
  if (response_ == &::google::protobuf::internal::kEmptyString) {
    response_ = new ::std::string;
  }
  return response_;
}
inline ::std::string* Response::release_response() {
  clear_has_response();
  if (response_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = response_;
    response_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Response::set_allocated_response(::std::string* response) {
  if (response_ != &::google::protobuf::internal::kEmptyString) {
    delete response_;
  }
  if (response) {
    set_has_response();
    response_ = response;
  } else {
    clear_has_response();
    response_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string type = 4;
inline bool Response::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Response::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Response::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Response::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& Response::type() const {
  return *type_;
}
inline void Response::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void Response::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void Response::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Response::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* Response::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Response::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes serialized_data = 5;
inline bool Response::has_serialized_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Response::set_has_serialized_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Response::clear_has_serialized_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Response::clear_serialized_data() {
  if (serialized_data_ != &::google::protobuf::internal::kEmptyString) {
    serialized_data_->clear();
  }
  clear_has_serialized_data();
}
inline const ::std::string& Response::serialized_data() const {
  return *serialized_data_;
}
inline void Response::set_serialized_data(const ::std::string& value) {
  set_has_serialized_data();
  if (serialized_data_ == &::google::protobuf::internal::kEmptyString) {
    serialized_data_ = new ::std::string;
  }
  serialized_data_->assign(value);
}
inline void Response::set_serialized_data(const char* value) {
  set_has_serialized_data();
  if (serialized_data_ == &::google::protobuf::internal::kEmptyString) {
    serialized_data_ = new ::std::string;
  }
  serialized_data_->assign(value);
}
inline void Response::set_serialized_data(const void* value, size_t size) {
  set_has_serialized_data();
  if (serialized_data_ == &::google::protobuf::internal::kEmptyString) {
    serialized_data_ = new ::std::string;
  }
  serialized_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Response::mutable_serialized_data() {
  set_has_serialized_data();
  if (serialized_data_ == &::google::protobuf::internal::kEmptyString) {
    serialized_data_ = new ::std::string;
  }
  return serialized_data_;
}
inline ::std::string* Response::release_serialized_data() {
  clear_has_serialized_data();
  if (serialized_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = serialized_data_;
    serialized_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Response::set_allocated_serialized_data(::std::string* serialized_data) {
  if (serialized_data_ != &::google::protobuf::internal::kEmptyString) {
    delete serialized_data_;
  }
  if (serialized_data) {
    set_has_serialized_data();
    serialized_data_ = serialized_data;
  } else {
    clear_has_serialized_data();
    serialized_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


typedef boost::shared_ptr<gazebo::msgs::Response> ResponsePtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

typedef const boost::shared_ptr<gazebo::msgs::Response const> ConstResponsePtr;
// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_response_2eproto__INCLUDED
