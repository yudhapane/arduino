// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: color.proto

#ifndef PROTOBUF_color_2eproto__INCLUDED
#define PROTOBUF_color_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#pragma GCC system_header
#include <boost/shared_ptr.hpp>
#include "gazebo/msgs/MsgFactory.hh"
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_color_2eproto();
void protobuf_AssignDesc_color_2eproto();
void protobuf_ShutdownFile_color_2eproto();

class Color;

// ===================================================================

class Color : public ::google::protobuf::Message {
 public:
  Color();
  virtual ~Color();

  Color(const Color& from);

  inline Color& operator=(const Color& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Color& default_instance();

  void Swap(Color* other);

  // implements Message ----------------------------------------------

  Color* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Color& from);
  void MergeFrom(const Color& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float r = 2;
  inline bool has_r() const;
  inline void clear_r();
  static const int kRFieldNumber = 2;
  inline float r() const;
  inline void set_r(float value);

  // required float g = 3;
  inline bool has_g() const;
  inline void clear_g();
  static const int kGFieldNumber = 3;
  inline float g() const;
  inline void set_g(float value);

  // required float b = 4;
  inline bool has_b() const;
  inline void clear_b();
  static const int kBFieldNumber = 4;
  inline float b() const;
  inline void set_b(float value);

  // optional float a = 5 [default = 1];
  inline bool has_a() const;
  inline void clear_a();
  static const int kAFieldNumber = 5;
  inline float a() const;
  inline void set_a(float value);

  // @@protoc_insertion_point(class_scope:gazebo.msgs.Color)
 private:
  inline void set_has_r();
  inline void clear_has_r();
  inline void set_has_g();
  inline void clear_has_g();
  inline void set_has_b();
  inline void clear_has_b();
  inline void set_has_a();
  inline void clear_has_a();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float r_;
  float g_;
  float b_;
  float a_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_color_2eproto();
  friend void protobuf_AssignDesc_color_2eproto();
  friend void protobuf_ShutdownFile_color_2eproto();

  void InitAsDefaultInstance();
  static Color* default_instance_;
};
// ===================================================================


// ===================================================================

// Color

// required float r = 2;
inline bool Color::has_r() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Color::set_has_r() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Color::clear_has_r() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Color::clear_r() {
  r_ = 0;
  clear_has_r();
}
inline float Color::r() const {
  return r_;
}
inline void Color::set_r(float value) {
  set_has_r();
  r_ = value;
}

// required float g = 3;
inline bool Color::has_g() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Color::set_has_g() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Color::clear_has_g() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Color::clear_g() {
  g_ = 0;
  clear_has_g();
}
inline float Color::g() const {
  return g_;
}
inline void Color::set_g(float value) {
  set_has_g();
  g_ = value;
}

// required float b = 4;
inline bool Color::has_b() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Color::set_has_b() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Color::clear_has_b() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Color::clear_b() {
  b_ = 0;
  clear_has_b();
}
inline float Color::b() const {
  return b_;
}
inline void Color::set_b(float value) {
  set_has_b();
  b_ = value;
}

// optional float a = 5 [default = 1];
inline bool Color::has_a() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Color::set_has_a() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Color::clear_has_a() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Color::clear_a() {
  a_ = 1;
  clear_has_a();
}
inline float Color::a() const {
  return a_;
}
inline void Color::set_a(float value) {
  set_has_a();
  a_ = value;
}


typedef boost::shared_ptr<gazebo::msgs::Color> ColorPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

typedef const boost::shared_ptr<gazebo::msgs::Color const> ConstColorPtr;
// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_color_2eproto__INCLUDED
