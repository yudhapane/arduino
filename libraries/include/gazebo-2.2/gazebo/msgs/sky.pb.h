// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sky.proto

#ifndef PROTOBUF_sky_2eproto__INCLUDED
#define PROTOBUF_sky_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "color.pb.h"
#pragma GCC system_header
#include <boost/shared_ptr.hpp>
#include "gazebo/msgs/MsgFactory.hh"
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_sky_2eproto();
void protobuf_AssignDesc_sky_2eproto();
void protobuf_ShutdownFile_sky_2eproto();

class Sky;

// ===================================================================

class Sky : public ::google::protobuf::Message {
 public:
  Sky();
  virtual ~Sky();

  Sky(const Sky& from);

  inline Sky& operator=(const Sky& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sky& default_instance();

  void Swap(Sky* other);

  // implements Message ----------------------------------------------

  Sky* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sky& from);
  void MergeFrom(const Sky& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline double time() const;
  inline void set_time(double value);

  // optional double sunrise = 2;
  inline bool has_sunrise() const;
  inline void clear_sunrise();
  static const int kSunriseFieldNumber = 2;
  inline double sunrise() const;
  inline void set_sunrise(double value);

  // optional double sunset = 3;
  inline bool has_sunset() const;
  inline void clear_sunset();
  static const int kSunsetFieldNumber = 3;
  inline double sunset() const;
  inline void set_sunset(double value);

  // optional double wind_speed = 4;
  inline bool has_wind_speed() const;
  inline void clear_wind_speed();
  static const int kWindSpeedFieldNumber = 4;
  inline double wind_speed() const;
  inline void set_wind_speed(double value);

  // optional double wind_direction = 5;
  inline bool has_wind_direction() const;
  inline void clear_wind_direction();
  static const int kWindDirectionFieldNumber = 5;
  inline double wind_direction() const;
  inline void set_wind_direction(double value);

  // optional .gazebo.msgs.Color cloud_ambient = 6;
  inline bool has_cloud_ambient() const;
  inline void clear_cloud_ambient();
  static const int kCloudAmbientFieldNumber = 6;
  inline const ::gazebo::msgs::Color& cloud_ambient() const;
  inline ::gazebo::msgs::Color* mutable_cloud_ambient();
  inline ::gazebo::msgs::Color* release_cloud_ambient();
  inline void set_allocated_cloud_ambient(::gazebo::msgs::Color* cloud_ambient);

  // optional double humidity = 7;
  inline bool has_humidity() const;
  inline void clear_humidity();
  static const int kHumidityFieldNumber = 7;
  inline double humidity() const;
  inline void set_humidity(double value);

  // optional double mean_cloud_size = 8;
  inline bool has_mean_cloud_size() const;
  inline void clear_mean_cloud_size();
  static const int kMeanCloudSizeFieldNumber = 8;
  inline double mean_cloud_size() const;
  inline void set_mean_cloud_size(double value);

  // @@protoc_insertion_point(class_scope:gazebo.msgs.Sky)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_sunrise();
  inline void clear_has_sunrise();
  inline void set_has_sunset();
  inline void clear_has_sunset();
  inline void set_has_wind_speed();
  inline void clear_has_wind_speed();
  inline void set_has_wind_direction();
  inline void clear_has_wind_direction();
  inline void set_has_cloud_ambient();
  inline void clear_has_cloud_ambient();
  inline void set_has_humidity();
  inline void clear_has_humidity();
  inline void set_has_mean_cloud_size();
  inline void clear_has_mean_cloud_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double time_;
  double sunrise_;
  double sunset_;
  double wind_speed_;
  double wind_direction_;
  ::gazebo::msgs::Color* cloud_ambient_;
  double humidity_;
  double mean_cloud_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_sky_2eproto();
  friend void protobuf_AssignDesc_sky_2eproto();
  friend void protobuf_ShutdownFile_sky_2eproto();

  void InitAsDefaultInstance();
  static Sky* default_instance_;
};
// ===================================================================


// ===================================================================

// Sky

// optional double time = 1;
inline bool Sky::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Sky::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Sky::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Sky::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline double Sky::time() const {
  return time_;
}
inline void Sky::set_time(double value) {
  set_has_time();
  time_ = value;
}

// optional double sunrise = 2;
inline bool Sky::has_sunrise() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Sky::set_has_sunrise() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Sky::clear_has_sunrise() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Sky::clear_sunrise() {
  sunrise_ = 0;
  clear_has_sunrise();
}
inline double Sky::sunrise() const {
  return sunrise_;
}
inline void Sky::set_sunrise(double value) {
  set_has_sunrise();
  sunrise_ = value;
}

// optional double sunset = 3;
inline bool Sky::has_sunset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Sky::set_has_sunset() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Sky::clear_has_sunset() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Sky::clear_sunset() {
  sunset_ = 0;
  clear_has_sunset();
}
inline double Sky::sunset() const {
  return sunset_;
}
inline void Sky::set_sunset(double value) {
  set_has_sunset();
  sunset_ = value;
}

// optional double wind_speed = 4;
inline bool Sky::has_wind_speed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Sky::set_has_wind_speed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Sky::clear_has_wind_speed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Sky::clear_wind_speed() {
  wind_speed_ = 0;
  clear_has_wind_speed();
}
inline double Sky::wind_speed() const {
  return wind_speed_;
}
inline void Sky::set_wind_speed(double value) {
  set_has_wind_speed();
  wind_speed_ = value;
}

// optional double wind_direction = 5;
inline bool Sky::has_wind_direction() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Sky::set_has_wind_direction() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Sky::clear_has_wind_direction() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Sky::clear_wind_direction() {
  wind_direction_ = 0;
  clear_has_wind_direction();
}
inline double Sky::wind_direction() const {
  return wind_direction_;
}
inline void Sky::set_wind_direction(double value) {
  set_has_wind_direction();
  wind_direction_ = value;
}

// optional .gazebo.msgs.Color cloud_ambient = 6;
inline bool Sky::has_cloud_ambient() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Sky::set_has_cloud_ambient() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Sky::clear_has_cloud_ambient() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Sky::clear_cloud_ambient() {
  if (cloud_ambient_ != NULL) cloud_ambient_->::gazebo::msgs::Color::Clear();
  clear_has_cloud_ambient();
}
inline const ::gazebo::msgs::Color& Sky::cloud_ambient() const {
  return cloud_ambient_ != NULL ? *cloud_ambient_ : *default_instance_->cloud_ambient_;
}
inline ::gazebo::msgs::Color* Sky::mutable_cloud_ambient() {
  set_has_cloud_ambient();
  if (cloud_ambient_ == NULL) cloud_ambient_ = new ::gazebo::msgs::Color;
  return cloud_ambient_;
}
inline ::gazebo::msgs::Color* Sky::release_cloud_ambient() {
  clear_has_cloud_ambient();
  ::gazebo::msgs::Color* temp = cloud_ambient_;
  cloud_ambient_ = NULL;
  return temp;
}
inline void Sky::set_allocated_cloud_ambient(::gazebo::msgs::Color* cloud_ambient) {
  delete cloud_ambient_;
  cloud_ambient_ = cloud_ambient;
  if (cloud_ambient) {
    set_has_cloud_ambient();
  } else {
    clear_has_cloud_ambient();
  }
}

// optional double humidity = 7;
inline bool Sky::has_humidity() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Sky::set_has_humidity() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Sky::clear_has_humidity() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Sky::clear_humidity() {
  humidity_ = 0;
  clear_has_humidity();
}
inline double Sky::humidity() const {
  return humidity_;
}
inline void Sky::set_humidity(double value) {
  set_has_humidity();
  humidity_ = value;
}

// optional double mean_cloud_size = 8;
inline bool Sky::has_mean_cloud_size() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Sky::set_has_mean_cloud_size() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Sky::clear_has_mean_cloud_size() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Sky::clear_mean_cloud_size() {
  mean_cloud_size_ = 0;
  clear_has_mean_cloud_size();
}
inline double Sky::mean_cloud_size() const {
  return mean_cloud_size_;
}
inline void Sky::set_mean_cloud_size(double value) {
  set_has_mean_cloud_size();
  mean_cloud_size_ = value;
}


typedef boost::shared_ptr<gazebo::msgs::Sky> SkyPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

typedef const boost::shared_ptr<gazebo::msgs::Sky const> ConstSkyPtr;
// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sky_2eproto__INCLUDED
