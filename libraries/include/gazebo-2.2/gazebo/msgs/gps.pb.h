// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gps.proto

#ifndef PROTOBUF_gps_2eproto__INCLUDED
#define PROTOBUF_gps_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "time.pb.h"
#pragma GCC system_header
#include <boost/shared_ptr.hpp>
#include "gazebo/msgs/MsgFactory.hh"
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_gps_2eproto();
void protobuf_AssignDesc_gps_2eproto();
void protobuf_ShutdownFile_gps_2eproto();

class GPS;

// ===================================================================

class GPS : public ::google::protobuf::Message {
 public:
  GPS();
  virtual ~GPS();

  GPS(const GPS& from);

  inline GPS& operator=(const GPS& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GPS& default_instance();

  void Swap(GPS* other);

  // implements Message ----------------------------------------------

  GPS* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GPS& from);
  void MergeFrom(const GPS& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .gazebo.msgs.Time time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline const ::gazebo::msgs::Time& time() const;
  inline ::gazebo::msgs::Time* mutable_time();
  inline ::gazebo::msgs::Time* release_time();
  inline void set_allocated_time(::gazebo::msgs::Time* time);

  // required string link_name = 2;
  inline bool has_link_name() const;
  inline void clear_link_name();
  static const int kLinkNameFieldNumber = 2;
  inline const ::std::string& link_name() const;
  inline void set_link_name(const ::std::string& value);
  inline void set_link_name(const char* value);
  inline void set_link_name(const char* value, size_t size);
  inline ::std::string* mutable_link_name();
  inline ::std::string* release_link_name();
  inline void set_allocated_link_name(::std::string* link_name);

  // required double latitude_deg = 3;
  inline bool has_latitude_deg() const;
  inline void clear_latitude_deg();
  static const int kLatitudeDegFieldNumber = 3;
  inline double latitude_deg() const;
  inline void set_latitude_deg(double value);

  // required double longitude_deg = 4;
  inline bool has_longitude_deg() const;
  inline void clear_longitude_deg();
  static const int kLongitudeDegFieldNumber = 4;
  inline double longitude_deg() const;
  inline void set_longitude_deg(double value);

  // required double altitude = 5;
  inline bool has_altitude() const;
  inline void clear_altitude();
  static const int kAltitudeFieldNumber = 5;
  inline double altitude() const;
  inline void set_altitude(double value);

  // optional double velocity_east = 6;
  inline bool has_velocity_east() const;
  inline void clear_velocity_east();
  static const int kVelocityEastFieldNumber = 6;
  inline double velocity_east() const;
  inline void set_velocity_east(double value);

  // optional double velocity_north = 7;
  inline bool has_velocity_north() const;
  inline void clear_velocity_north();
  static const int kVelocityNorthFieldNumber = 7;
  inline double velocity_north() const;
  inline void set_velocity_north(double value);

  // optional double velocity_up = 8;
  inline bool has_velocity_up() const;
  inline void clear_velocity_up();
  static const int kVelocityUpFieldNumber = 8;
  inline double velocity_up() const;
  inline void set_velocity_up(double value);

  // @@protoc_insertion_point(class_scope:gazebo.msgs.GPS)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_link_name();
  inline void clear_has_link_name();
  inline void set_has_latitude_deg();
  inline void clear_has_latitude_deg();
  inline void set_has_longitude_deg();
  inline void clear_has_longitude_deg();
  inline void set_has_altitude();
  inline void clear_has_altitude();
  inline void set_has_velocity_east();
  inline void clear_has_velocity_east();
  inline void set_has_velocity_north();
  inline void clear_has_velocity_north();
  inline void set_has_velocity_up();
  inline void clear_has_velocity_up();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::gazebo::msgs::Time* time_;
  ::std::string* link_name_;
  double latitude_deg_;
  double longitude_deg_;
  double altitude_;
  double velocity_east_;
  double velocity_north_;
  double velocity_up_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_gps_2eproto();
  friend void protobuf_AssignDesc_gps_2eproto();
  friend void protobuf_ShutdownFile_gps_2eproto();

  void InitAsDefaultInstance();
  static GPS* default_instance_;
};
// ===================================================================


// ===================================================================

// GPS

// required .gazebo.msgs.Time time = 1;
inline bool GPS::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GPS::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GPS::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GPS::clear_time() {
  if (time_ != NULL) time_->::gazebo::msgs::Time::Clear();
  clear_has_time();
}
inline const ::gazebo::msgs::Time& GPS::time() const {
  return time_ != NULL ? *time_ : *default_instance_->time_;
}
inline ::gazebo::msgs::Time* GPS::mutable_time() {
  set_has_time();
  if (time_ == NULL) time_ = new ::gazebo::msgs::Time;
  return time_;
}
inline ::gazebo::msgs::Time* GPS::release_time() {
  clear_has_time();
  ::gazebo::msgs::Time* temp = time_;
  time_ = NULL;
  return temp;
}
inline void GPS::set_allocated_time(::gazebo::msgs::Time* time) {
  delete time_;
  time_ = time;
  if (time) {
    set_has_time();
  } else {
    clear_has_time();
  }
}

// required string link_name = 2;
inline bool GPS::has_link_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GPS::set_has_link_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GPS::clear_has_link_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GPS::clear_link_name() {
  if (link_name_ != &::google::protobuf::internal::kEmptyString) {
    link_name_->clear();
  }
  clear_has_link_name();
}
inline const ::std::string& GPS::link_name() const {
  return *link_name_;
}
inline void GPS::set_link_name(const ::std::string& value) {
  set_has_link_name();
  if (link_name_ == &::google::protobuf::internal::kEmptyString) {
    link_name_ = new ::std::string;
  }
  link_name_->assign(value);
}
inline void GPS::set_link_name(const char* value) {
  set_has_link_name();
  if (link_name_ == &::google::protobuf::internal::kEmptyString) {
    link_name_ = new ::std::string;
  }
  link_name_->assign(value);
}
inline void GPS::set_link_name(const char* value, size_t size) {
  set_has_link_name();
  if (link_name_ == &::google::protobuf::internal::kEmptyString) {
    link_name_ = new ::std::string;
  }
  link_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GPS::mutable_link_name() {
  set_has_link_name();
  if (link_name_ == &::google::protobuf::internal::kEmptyString) {
    link_name_ = new ::std::string;
  }
  return link_name_;
}
inline ::std::string* GPS::release_link_name() {
  clear_has_link_name();
  if (link_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = link_name_;
    link_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GPS::set_allocated_link_name(::std::string* link_name) {
  if (link_name_ != &::google::protobuf::internal::kEmptyString) {
    delete link_name_;
  }
  if (link_name) {
    set_has_link_name();
    link_name_ = link_name;
  } else {
    clear_has_link_name();
    link_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required double latitude_deg = 3;
inline bool GPS::has_latitude_deg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GPS::set_has_latitude_deg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GPS::clear_has_latitude_deg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GPS::clear_latitude_deg() {
  latitude_deg_ = 0;
  clear_has_latitude_deg();
}
inline double GPS::latitude_deg() const {
  return latitude_deg_;
}
inline void GPS::set_latitude_deg(double value) {
  set_has_latitude_deg();
  latitude_deg_ = value;
}

// required double longitude_deg = 4;
inline bool GPS::has_longitude_deg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GPS::set_has_longitude_deg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GPS::clear_has_longitude_deg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GPS::clear_longitude_deg() {
  longitude_deg_ = 0;
  clear_has_longitude_deg();
}
inline double GPS::longitude_deg() const {
  return longitude_deg_;
}
inline void GPS::set_longitude_deg(double value) {
  set_has_longitude_deg();
  longitude_deg_ = value;
}

// required double altitude = 5;
inline bool GPS::has_altitude() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GPS::set_has_altitude() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GPS::clear_has_altitude() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GPS::clear_altitude() {
  altitude_ = 0;
  clear_has_altitude();
}
inline double GPS::altitude() const {
  return altitude_;
}
inline void GPS::set_altitude(double value) {
  set_has_altitude();
  altitude_ = value;
}

// optional double velocity_east = 6;
inline bool GPS::has_velocity_east() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GPS::set_has_velocity_east() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GPS::clear_has_velocity_east() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GPS::clear_velocity_east() {
  velocity_east_ = 0;
  clear_has_velocity_east();
}
inline double GPS::velocity_east() const {
  return velocity_east_;
}
inline void GPS::set_velocity_east(double value) {
  set_has_velocity_east();
  velocity_east_ = value;
}

// optional double velocity_north = 7;
inline bool GPS::has_velocity_north() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GPS::set_has_velocity_north() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GPS::clear_has_velocity_north() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GPS::clear_velocity_north() {
  velocity_north_ = 0;
  clear_has_velocity_north();
}
inline double GPS::velocity_north() const {
  return velocity_north_;
}
inline void GPS::set_velocity_north(double value) {
  set_has_velocity_north();
  velocity_north_ = value;
}

// optional double velocity_up = 8;
inline bool GPS::has_velocity_up() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GPS::set_has_velocity_up() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GPS::clear_has_velocity_up() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GPS::clear_velocity_up() {
  velocity_up_ = 0;
  clear_has_velocity_up();
}
inline double GPS::velocity_up() const {
  return velocity_up_;
}
inline void GPS::set_velocity_up(double value) {
  set_has_velocity_up();
  velocity_up_ = value;
}


typedef boost::shared_ptr<gazebo::msgs::GPS> GPSPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

typedef const boost::shared_ptr<gazebo::msgs::GPS const> ConstGPSPtr;
// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_gps_2eproto__INCLUDED
