// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: surface.proto

#ifndef PROTOBUF_surface_2eproto__INCLUDED
#define PROTOBUF_surface_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "friction.pb.h"
#pragma GCC system_header
#include <boost/shared_ptr.hpp>
#include "gazebo/msgs/MsgFactory.hh"
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_surface_2eproto();
void protobuf_AssignDesc_surface_2eproto();
void protobuf_ShutdownFile_surface_2eproto();

class Surface;

// ===================================================================

class Surface : public ::google::protobuf::Message {
 public:
  Surface();
  virtual ~Surface();

  Surface(const Surface& from);

  inline Surface& operator=(const Surface& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Surface& default_instance();

  void Swap(Surface* other);

  // implements Message ----------------------------------------------

  Surface* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Surface& from);
  void MergeFrom(const Surface& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .gazebo.msgs.Friction friction = 1;
  inline bool has_friction() const;
  inline void clear_friction();
  static const int kFrictionFieldNumber = 1;
  inline const ::gazebo::msgs::Friction& friction() const;
  inline ::gazebo::msgs::Friction* mutable_friction();
  inline ::gazebo::msgs::Friction* release_friction();
  inline void set_allocated_friction(::gazebo::msgs::Friction* friction);

  // optional double restitution_coefficient = 2;
  inline bool has_restitution_coefficient() const;
  inline void clear_restitution_coefficient();
  static const int kRestitutionCoefficientFieldNumber = 2;
  inline double restitution_coefficient() const;
  inline void set_restitution_coefficient(double value);

  // optional double bounce_threshold = 3;
  inline bool has_bounce_threshold() const;
  inline void clear_bounce_threshold();
  static const int kBounceThresholdFieldNumber = 3;
  inline double bounce_threshold() const;
  inline void set_bounce_threshold(double value);

  // optional double soft_cfm = 4;
  inline bool has_soft_cfm() const;
  inline void clear_soft_cfm();
  static const int kSoftCfmFieldNumber = 4;
  inline double soft_cfm() const;
  inline void set_soft_cfm(double value);

  // optional double soft_erp = 5;
  inline bool has_soft_erp() const;
  inline void clear_soft_erp();
  static const int kSoftErpFieldNumber = 5;
  inline double soft_erp() const;
  inline void set_soft_erp(double value);

  // optional double kp = 6;
  inline bool has_kp() const;
  inline void clear_kp();
  static const int kKpFieldNumber = 6;
  inline double kp() const;
  inline void set_kp(double value);

  // optional double kd = 7;
  inline bool has_kd() const;
  inline void clear_kd();
  static const int kKdFieldNumber = 7;
  inline double kd() const;
  inline void set_kd(double value);

  // optional double max_vel = 8;
  inline bool has_max_vel() const;
  inline void clear_max_vel();
  static const int kMaxVelFieldNumber = 8;
  inline double max_vel() const;
  inline void set_max_vel(double value);

  // optional double min_depth = 9;
  inline bool has_min_depth() const;
  inline void clear_min_depth();
  static const int kMinDepthFieldNumber = 9;
  inline double min_depth() const;
  inline void set_min_depth(double value);

  // optional bool collide_without_contact = 10;
  inline bool has_collide_without_contact() const;
  inline void clear_collide_without_contact();
  static const int kCollideWithoutContactFieldNumber = 10;
  inline bool collide_without_contact() const;
  inline void set_collide_without_contact(bool value);

  // optional uint32 collide_without_contact_bitmask = 11;
  inline bool has_collide_without_contact_bitmask() const;
  inline void clear_collide_without_contact_bitmask();
  static const int kCollideWithoutContactBitmaskFieldNumber = 11;
  inline ::google::protobuf::uint32 collide_without_contact_bitmask() const;
  inline void set_collide_without_contact_bitmask(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gazebo.msgs.Surface)
 private:
  inline void set_has_friction();
  inline void clear_has_friction();
  inline void set_has_restitution_coefficient();
  inline void clear_has_restitution_coefficient();
  inline void set_has_bounce_threshold();
  inline void clear_has_bounce_threshold();
  inline void set_has_soft_cfm();
  inline void clear_has_soft_cfm();
  inline void set_has_soft_erp();
  inline void clear_has_soft_erp();
  inline void set_has_kp();
  inline void clear_has_kp();
  inline void set_has_kd();
  inline void clear_has_kd();
  inline void set_has_max_vel();
  inline void clear_has_max_vel();
  inline void set_has_min_depth();
  inline void clear_has_min_depth();
  inline void set_has_collide_without_contact();
  inline void clear_has_collide_without_contact();
  inline void set_has_collide_without_contact_bitmask();
  inline void clear_has_collide_without_contact_bitmask();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::gazebo::msgs::Friction* friction_;
  double restitution_coefficient_;
  double bounce_threshold_;
  double soft_cfm_;
  double soft_erp_;
  double kp_;
  double kd_;
  double max_vel_;
  double min_depth_;
  bool collide_without_contact_;
  ::google::protobuf::uint32 collide_without_contact_bitmask_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_surface_2eproto();
  friend void protobuf_AssignDesc_surface_2eproto();
  friend void protobuf_ShutdownFile_surface_2eproto();

  void InitAsDefaultInstance();
  static Surface* default_instance_;
};
// ===================================================================


// ===================================================================

// Surface

// optional .gazebo.msgs.Friction friction = 1;
inline bool Surface::has_friction() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Surface::set_has_friction() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Surface::clear_has_friction() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Surface::clear_friction() {
  if (friction_ != NULL) friction_->::gazebo::msgs::Friction::Clear();
  clear_has_friction();
}
inline const ::gazebo::msgs::Friction& Surface::friction() const {
  return friction_ != NULL ? *friction_ : *default_instance_->friction_;
}
inline ::gazebo::msgs::Friction* Surface::mutable_friction() {
  set_has_friction();
  if (friction_ == NULL) friction_ = new ::gazebo::msgs::Friction;
  return friction_;
}
inline ::gazebo::msgs::Friction* Surface::release_friction() {
  clear_has_friction();
  ::gazebo::msgs::Friction* temp = friction_;
  friction_ = NULL;
  return temp;
}
inline void Surface::set_allocated_friction(::gazebo::msgs::Friction* friction) {
  delete friction_;
  friction_ = friction;
  if (friction) {
    set_has_friction();
  } else {
    clear_has_friction();
  }
}

// optional double restitution_coefficient = 2;
inline bool Surface::has_restitution_coefficient() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Surface::set_has_restitution_coefficient() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Surface::clear_has_restitution_coefficient() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Surface::clear_restitution_coefficient() {
  restitution_coefficient_ = 0;
  clear_has_restitution_coefficient();
}
inline double Surface::restitution_coefficient() const {
  return restitution_coefficient_;
}
inline void Surface::set_restitution_coefficient(double value) {
  set_has_restitution_coefficient();
  restitution_coefficient_ = value;
}

// optional double bounce_threshold = 3;
inline bool Surface::has_bounce_threshold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Surface::set_has_bounce_threshold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Surface::clear_has_bounce_threshold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Surface::clear_bounce_threshold() {
  bounce_threshold_ = 0;
  clear_has_bounce_threshold();
}
inline double Surface::bounce_threshold() const {
  return bounce_threshold_;
}
inline void Surface::set_bounce_threshold(double value) {
  set_has_bounce_threshold();
  bounce_threshold_ = value;
}

// optional double soft_cfm = 4;
inline bool Surface::has_soft_cfm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Surface::set_has_soft_cfm() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Surface::clear_has_soft_cfm() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Surface::clear_soft_cfm() {
  soft_cfm_ = 0;
  clear_has_soft_cfm();
}
inline double Surface::soft_cfm() const {
  return soft_cfm_;
}
inline void Surface::set_soft_cfm(double value) {
  set_has_soft_cfm();
  soft_cfm_ = value;
}

// optional double soft_erp = 5;
inline bool Surface::has_soft_erp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Surface::set_has_soft_erp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Surface::clear_has_soft_erp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Surface::clear_soft_erp() {
  soft_erp_ = 0;
  clear_has_soft_erp();
}
inline double Surface::soft_erp() const {
  return soft_erp_;
}
inline void Surface::set_soft_erp(double value) {
  set_has_soft_erp();
  soft_erp_ = value;
}

// optional double kp = 6;
inline bool Surface::has_kp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Surface::set_has_kp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Surface::clear_has_kp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Surface::clear_kp() {
  kp_ = 0;
  clear_has_kp();
}
inline double Surface::kp() const {
  return kp_;
}
inline void Surface::set_kp(double value) {
  set_has_kp();
  kp_ = value;
}

// optional double kd = 7;
inline bool Surface::has_kd() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Surface::set_has_kd() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Surface::clear_has_kd() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Surface::clear_kd() {
  kd_ = 0;
  clear_has_kd();
}
inline double Surface::kd() const {
  return kd_;
}
inline void Surface::set_kd(double value) {
  set_has_kd();
  kd_ = value;
}

// optional double max_vel = 8;
inline bool Surface::has_max_vel() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Surface::set_has_max_vel() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Surface::clear_has_max_vel() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Surface::clear_max_vel() {
  max_vel_ = 0;
  clear_has_max_vel();
}
inline double Surface::max_vel() const {
  return max_vel_;
}
inline void Surface::set_max_vel(double value) {
  set_has_max_vel();
  max_vel_ = value;
}

// optional double min_depth = 9;
inline bool Surface::has_min_depth() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Surface::set_has_min_depth() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Surface::clear_has_min_depth() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Surface::clear_min_depth() {
  min_depth_ = 0;
  clear_has_min_depth();
}
inline double Surface::min_depth() const {
  return min_depth_;
}
inline void Surface::set_min_depth(double value) {
  set_has_min_depth();
  min_depth_ = value;
}

// optional bool collide_without_contact = 10;
inline bool Surface::has_collide_without_contact() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Surface::set_has_collide_without_contact() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Surface::clear_has_collide_without_contact() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Surface::clear_collide_without_contact() {
  collide_without_contact_ = false;
  clear_has_collide_without_contact();
}
inline bool Surface::collide_without_contact() const {
  return collide_without_contact_;
}
inline void Surface::set_collide_without_contact(bool value) {
  set_has_collide_without_contact();
  collide_without_contact_ = value;
}

// optional uint32 collide_without_contact_bitmask = 11;
inline bool Surface::has_collide_without_contact_bitmask() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Surface::set_has_collide_without_contact_bitmask() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Surface::clear_has_collide_without_contact_bitmask() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Surface::clear_collide_without_contact_bitmask() {
  collide_without_contact_bitmask_ = 0u;
  clear_has_collide_without_contact_bitmask();
}
inline ::google::protobuf::uint32 Surface::collide_without_contact_bitmask() const {
  return collide_without_contact_bitmask_;
}
inline void Surface::set_collide_without_contact_bitmask(::google::protobuf::uint32 value) {
  set_has_collide_without_contact_bitmask();
  collide_without_contact_bitmask_ = value;
}


typedef boost::shared_ptr<gazebo::msgs::Surface> SurfacePtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

typedef const boost::shared_ptr<gazebo::msgs::Surface const> ConstSurfacePtr;
// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_surface_2eproto__INCLUDED
