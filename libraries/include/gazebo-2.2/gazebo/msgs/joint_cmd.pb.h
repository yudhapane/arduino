// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: joint_cmd.proto

#ifndef PROTOBUF_joint_5fcmd_2eproto__INCLUDED
#define PROTOBUF_joint_5fcmd_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "vector3d.pb.h"
#include "axis.pb.h"
#include "pose.pb.h"
#include "pid.pb.h"
#pragma GCC system_header
#include <boost/shared_ptr.hpp>
#include "gazebo/msgs/MsgFactory.hh"
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_joint_5fcmd_2eproto();
void protobuf_AssignDesc_joint_5fcmd_2eproto();
void protobuf_ShutdownFile_joint_5fcmd_2eproto();

class JointCmd;

// ===================================================================

class JointCmd : public ::google::protobuf::Message {
 public:
  JointCmd();
  virtual ~JointCmd();

  JointCmd(const JointCmd& from);

  inline JointCmd& operator=(const JointCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JointCmd& default_instance();

  void Swap(JointCmd* other);

  // implements Message ----------------------------------------------

  JointCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JointCmd& from);
  void MergeFrom(const JointCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 axis = 2 [default = 0];
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 2;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // optional double force = 3;
  inline bool has_force() const;
  inline void clear_force();
  static const int kForceFieldNumber = 3;
  inline double force() const;
  inline void set_force(double value);

  // optional .gazebo.msgs.PID position = 4;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 4;
  inline const ::gazebo::msgs::PID& position() const;
  inline ::gazebo::msgs::PID* mutable_position();
  inline ::gazebo::msgs::PID* release_position();
  inline void set_allocated_position(::gazebo::msgs::PID* position);

  // optional .gazebo.msgs.PID velocity = 5;
  inline bool has_velocity() const;
  inline void clear_velocity();
  static const int kVelocityFieldNumber = 5;
  inline const ::gazebo::msgs::PID& velocity() const;
  inline ::gazebo::msgs::PID* mutable_velocity();
  inline ::gazebo::msgs::PID* release_velocity();
  inline void set_allocated_velocity(::gazebo::msgs::PID* velocity);

  // optional bool reset = 6;
  inline bool has_reset() const;
  inline void clear_reset();
  static const int kResetFieldNumber = 6;
  inline bool reset() const;
  inline void set_reset(bool value);

  // @@protoc_insertion_point(class_scope:gazebo.msgs.JointCmd)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_force();
  inline void clear_has_force();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_velocity();
  inline void clear_has_velocity();
  inline void set_has_reset();
  inline void clear_has_reset();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  double force_;
  ::gazebo::msgs::PID* position_;
  ::google::protobuf::int32 axis_;
  bool reset_;
  ::gazebo::msgs::PID* velocity_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_joint_5fcmd_2eproto();
  friend void protobuf_AssignDesc_joint_5fcmd_2eproto();
  friend void protobuf_ShutdownFile_joint_5fcmd_2eproto();

  void InitAsDefaultInstance();
  static JointCmd* default_instance_;
};
// ===================================================================


// ===================================================================

// JointCmd

// required string name = 1;
inline bool JointCmd::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JointCmd::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JointCmd::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JointCmd::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& JointCmd::name() const {
  return *name_;
}
inline void JointCmd::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void JointCmd::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void JointCmd::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JointCmd::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* JointCmd::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JointCmd::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 axis = 2 [default = 0];
inline bool JointCmd::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JointCmd::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JointCmd::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JointCmd::clear_axis() {
  axis_ = 0;
  clear_has_axis();
}
inline ::google::protobuf::int32 JointCmd::axis() const {
  return axis_;
}
inline void JointCmd::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
}

// optional double force = 3;
inline bool JointCmd::has_force() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JointCmd::set_has_force() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JointCmd::clear_has_force() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JointCmd::clear_force() {
  force_ = 0;
  clear_has_force();
}
inline double JointCmd::force() const {
  return force_;
}
inline void JointCmd::set_force(double value) {
  set_has_force();
  force_ = value;
}

// optional .gazebo.msgs.PID position = 4;
inline bool JointCmd::has_position() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JointCmd::set_has_position() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JointCmd::clear_has_position() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JointCmd::clear_position() {
  if (position_ != NULL) position_->::gazebo::msgs::PID::Clear();
  clear_has_position();
}
inline const ::gazebo::msgs::PID& JointCmd::position() const {
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::gazebo::msgs::PID* JointCmd::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::gazebo::msgs::PID;
  return position_;
}
inline ::gazebo::msgs::PID* JointCmd::release_position() {
  clear_has_position();
  ::gazebo::msgs::PID* temp = position_;
  position_ = NULL;
  return temp;
}
inline void JointCmd::set_allocated_position(::gazebo::msgs::PID* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
}

// optional .gazebo.msgs.PID velocity = 5;
inline bool JointCmd::has_velocity() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JointCmd::set_has_velocity() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JointCmd::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JointCmd::clear_velocity() {
  if (velocity_ != NULL) velocity_->::gazebo::msgs::PID::Clear();
  clear_has_velocity();
}
inline const ::gazebo::msgs::PID& JointCmd::velocity() const {
  return velocity_ != NULL ? *velocity_ : *default_instance_->velocity_;
}
inline ::gazebo::msgs::PID* JointCmd::mutable_velocity() {
  set_has_velocity();
  if (velocity_ == NULL) velocity_ = new ::gazebo::msgs::PID;
  return velocity_;
}
inline ::gazebo::msgs::PID* JointCmd::release_velocity() {
  clear_has_velocity();
  ::gazebo::msgs::PID* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
inline void JointCmd::set_allocated_velocity(::gazebo::msgs::PID* velocity) {
  delete velocity_;
  velocity_ = velocity;
  if (velocity) {
    set_has_velocity();
  } else {
    clear_has_velocity();
  }
}

// optional bool reset = 6;
inline bool JointCmd::has_reset() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JointCmd::set_has_reset() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JointCmd::clear_has_reset() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JointCmd::clear_reset() {
  reset_ = false;
  clear_has_reset();
}
inline bool JointCmd::reset() const {
  return reset_;
}
inline void JointCmd::set_reset(bool value) {
  set_has_reset();
  reset_ = value;
}


typedef boost::shared_ptr<gazebo::msgs::JointCmd> JointCmdPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

typedef const boost::shared_ptr<gazebo::msgs::JointCmd const> ConstJointCmdPtr;
// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_joint_5fcmd_2eproto__INCLUDED
