// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: meshgeom.proto

#ifndef PROTOBUF_meshgeom_2eproto__INCLUDED
#define PROTOBUF_meshgeom_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "vector3d.pb.h"
#pragma GCC system_header
#include <boost/shared_ptr.hpp>
#include "gazebo/msgs/MsgFactory.hh"
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_meshgeom_2eproto();
void protobuf_AssignDesc_meshgeom_2eproto();
void protobuf_ShutdownFile_meshgeom_2eproto();

class MeshGeom;

// ===================================================================

class MeshGeom : public ::google::protobuf::Message {
 public:
  MeshGeom();
  virtual ~MeshGeom();

  MeshGeom(const MeshGeom& from);

  inline MeshGeom& operator=(const MeshGeom& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MeshGeom& default_instance();

  void Swap(MeshGeom* other);

  // implements Message ----------------------------------------------

  MeshGeom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MeshGeom& from);
  void MergeFrom(const MeshGeom& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string filename = 1;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFilenameFieldNumber = 1;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  inline void set_allocated_filename(::std::string* filename);

  // optional .gazebo.msgs.Vector3d scale = 2;
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 2;
  inline const ::gazebo::msgs::Vector3d& scale() const;
  inline ::gazebo::msgs::Vector3d* mutable_scale();
  inline ::gazebo::msgs::Vector3d* release_scale();
  inline void set_allocated_scale(::gazebo::msgs::Vector3d* scale);

  // optional string submesh = 3;
  inline bool has_submesh() const;
  inline void clear_submesh();
  static const int kSubmeshFieldNumber = 3;
  inline const ::std::string& submesh() const;
  inline void set_submesh(const ::std::string& value);
  inline void set_submesh(const char* value);
  inline void set_submesh(const char* value, size_t size);
  inline ::std::string* mutable_submesh();
  inline ::std::string* release_submesh();
  inline void set_allocated_submesh(::std::string* submesh);

  // optional bool center_submesh = 4;
  inline bool has_center_submesh() const;
  inline void clear_center_submesh();
  static const int kCenterSubmeshFieldNumber = 4;
  inline bool center_submesh() const;
  inline void set_center_submesh(bool value);

  // @@protoc_insertion_point(class_scope:gazebo.msgs.MeshGeom)
 private:
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_submesh();
  inline void clear_has_submesh();
  inline void set_has_center_submesh();
  inline void clear_has_center_submesh();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* filename_;
  ::gazebo::msgs::Vector3d* scale_;
  ::std::string* submesh_;
  bool center_submesh_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_meshgeom_2eproto();
  friend void protobuf_AssignDesc_meshgeom_2eproto();
  friend void protobuf_ShutdownFile_meshgeom_2eproto();

  void InitAsDefaultInstance();
  static MeshGeom* default_instance_;
};
// ===================================================================


// ===================================================================

// MeshGeom

// required string filename = 1;
inline bool MeshGeom::has_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MeshGeom::set_has_filename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MeshGeom::clear_has_filename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MeshGeom::clear_filename() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& MeshGeom::filename() const {
  return *filename_;
}
inline void MeshGeom::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void MeshGeom::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void MeshGeom::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MeshGeom::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  return filename_;
}
inline ::std::string* MeshGeom::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MeshGeom::set_allocated_filename(::std::string* filename) {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (filename) {
    set_has_filename();
    filename_ = filename;
  } else {
    clear_has_filename();
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .gazebo.msgs.Vector3d scale = 2;
inline bool MeshGeom::has_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MeshGeom::set_has_scale() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MeshGeom::clear_has_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MeshGeom::clear_scale() {
  if (scale_ != NULL) scale_->::gazebo::msgs::Vector3d::Clear();
  clear_has_scale();
}
inline const ::gazebo::msgs::Vector3d& MeshGeom::scale() const {
  return scale_ != NULL ? *scale_ : *default_instance_->scale_;
}
inline ::gazebo::msgs::Vector3d* MeshGeom::mutable_scale() {
  set_has_scale();
  if (scale_ == NULL) scale_ = new ::gazebo::msgs::Vector3d;
  return scale_;
}
inline ::gazebo::msgs::Vector3d* MeshGeom::release_scale() {
  clear_has_scale();
  ::gazebo::msgs::Vector3d* temp = scale_;
  scale_ = NULL;
  return temp;
}
inline void MeshGeom::set_allocated_scale(::gazebo::msgs::Vector3d* scale) {
  delete scale_;
  scale_ = scale;
  if (scale) {
    set_has_scale();
  } else {
    clear_has_scale();
  }
}

// optional string submesh = 3;
inline bool MeshGeom::has_submesh() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MeshGeom::set_has_submesh() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MeshGeom::clear_has_submesh() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MeshGeom::clear_submesh() {
  if (submesh_ != &::google::protobuf::internal::kEmptyString) {
    submesh_->clear();
  }
  clear_has_submesh();
}
inline const ::std::string& MeshGeom::submesh() const {
  return *submesh_;
}
inline void MeshGeom::set_submesh(const ::std::string& value) {
  set_has_submesh();
  if (submesh_ == &::google::protobuf::internal::kEmptyString) {
    submesh_ = new ::std::string;
  }
  submesh_->assign(value);
}
inline void MeshGeom::set_submesh(const char* value) {
  set_has_submesh();
  if (submesh_ == &::google::protobuf::internal::kEmptyString) {
    submesh_ = new ::std::string;
  }
  submesh_->assign(value);
}
inline void MeshGeom::set_submesh(const char* value, size_t size) {
  set_has_submesh();
  if (submesh_ == &::google::protobuf::internal::kEmptyString) {
    submesh_ = new ::std::string;
  }
  submesh_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MeshGeom::mutable_submesh() {
  set_has_submesh();
  if (submesh_ == &::google::protobuf::internal::kEmptyString) {
    submesh_ = new ::std::string;
  }
  return submesh_;
}
inline ::std::string* MeshGeom::release_submesh() {
  clear_has_submesh();
  if (submesh_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = submesh_;
    submesh_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MeshGeom::set_allocated_submesh(::std::string* submesh) {
  if (submesh_ != &::google::protobuf::internal::kEmptyString) {
    delete submesh_;
  }
  if (submesh) {
    set_has_submesh();
    submesh_ = submesh;
  } else {
    clear_has_submesh();
    submesh_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool center_submesh = 4;
inline bool MeshGeom::has_center_submesh() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MeshGeom::set_has_center_submesh() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MeshGeom::clear_has_center_submesh() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MeshGeom::clear_center_submesh() {
  center_submesh_ = false;
  clear_has_center_submesh();
}
inline bool MeshGeom::center_submesh() const {
  return center_submesh_;
}
inline void MeshGeom::set_center_submesh(bool value) {
  set_has_center_submesh();
  center_submesh_ = value;
}


typedef boost::shared_ptr<gazebo::msgs::MeshGeom> MeshGeomPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

typedef const boost::shared_ptr<gazebo::msgs::MeshGeom const> ConstMeshGeomPtr;
// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_meshgeom_2eproto__INCLUDED
