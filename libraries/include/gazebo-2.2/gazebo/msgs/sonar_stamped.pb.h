// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sonar_stamped.proto

#ifndef PROTOBUF_sonar_5fstamped_2eproto__INCLUDED
#define PROTOBUF_sonar_5fstamped_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "time.pb.h"
#include "sonar.pb.h"
#pragma GCC system_header
#include <boost/shared_ptr.hpp>
#include "gazebo/msgs/MsgFactory.hh"
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_sonar_5fstamped_2eproto();
void protobuf_AssignDesc_sonar_5fstamped_2eproto();
void protobuf_ShutdownFile_sonar_5fstamped_2eproto();

class SonarStamped;

// ===================================================================

class SonarStamped : public ::google::protobuf::Message {
 public:
  SonarStamped();
  virtual ~SonarStamped();

  SonarStamped(const SonarStamped& from);

  inline SonarStamped& operator=(const SonarStamped& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SonarStamped& default_instance();

  void Swap(SonarStamped* other);

  // implements Message ----------------------------------------------

  SonarStamped* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SonarStamped& from);
  void MergeFrom(const SonarStamped& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .gazebo.msgs.Time time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline const ::gazebo::msgs::Time& time() const;
  inline ::gazebo::msgs::Time* mutable_time();
  inline ::gazebo::msgs::Time* release_time();
  inline void set_allocated_time(::gazebo::msgs::Time* time);

  // required .gazebo.msgs.Sonar sonar = 2;
  inline bool has_sonar() const;
  inline void clear_sonar();
  static const int kSonarFieldNumber = 2;
  inline const ::gazebo::msgs::Sonar& sonar() const;
  inline ::gazebo::msgs::Sonar* mutable_sonar();
  inline ::gazebo::msgs::Sonar* release_sonar();
  inline void set_allocated_sonar(::gazebo::msgs::Sonar* sonar);

  // @@protoc_insertion_point(class_scope:gazebo.msgs.SonarStamped)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_sonar();
  inline void clear_has_sonar();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::gazebo::msgs::Time* time_;
  ::gazebo::msgs::Sonar* sonar_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_sonar_5fstamped_2eproto();
  friend void protobuf_AssignDesc_sonar_5fstamped_2eproto();
  friend void protobuf_ShutdownFile_sonar_5fstamped_2eproto();

  void InitAsDefaultInstance();
  static SonarStamped* default_instance_;
};
// ===================================================================


// ===================================================================

// SonarStamped

// required .gazebo.msgs.Time time = 1;
inline bool SonarStamped::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SonarStamped::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SonarStamped::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SonarStamped::clear_time() {
  if (time_ != NULL) time_->::gazebo::msgs::Time::Clear();
  clear_has_time();
}
inline const ::gazebo::msgs::Time& SonarStamped::time() const {
  return time_ != NULL ? *time_ : *default_instance_->time_;
}
inline ::gazebo::msgs::Time* SonarStamped::mutable_time() {
  set_has_time();
  if (time_ == NULL) time_ = new ::gazebo::msgs::Time;
  return time_;
}
inline ::gazebo::msgs::Time* SonarStamped::release_time() {
  clear_has_time();
  ::gazebo::msgs::Time* temp = time_;
  time_ = NULL;
  return temp;
}
inline void SonarStamped::set_allocated_time(::gazebo::msgs::Time* time) {
  delete time_;
  time_ = time;
  if (time) {
    set_has_time();
  } else {
    clear_has_time();
  }
}

// required .gazebo.msgs.Sonar sonar = 2;
inline bool SonarStamped::has_sonar() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SonarStamped::set_has_sonar() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SonarStamped::clear_has_sonar() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SonarStamped::clear_sonar() {
  if (sonar_ != NULL) sonar_->::gazebo::msgs::Sonar::Clear();
  clear_has_sonar();
}
inline const ::gazebo::msgs::Sonar& SonarStamped::sonar() const {
  return sonar_ != NULL ? *sonar_ : *default_instance_->sonar_;
}
inline ::gazebo::msgs::Sonar* SonarStamped::mutable_sonar() {
  set_has_sonar();
  if (sonar_ == NULL) sonar_ = new ::gazebo::msgs::Sonar;
  return sonar_;
}
inline ::gazebo::msgs::Sonar* SonarStamped::release_sonar() {
  clear_has_sonar();
  ::gazebo::msgs::Sonar* temp = sonar_;
  sonar_ = NULL;
  return temp;
}
inline void SonarStamped::set_allocated_sonar(::gazebo::msgs::Sonar* sonar) {
  delete sonar_;
  sonar_ = sonar;
  if (sonar) {
    set_has_sonar();
  } else {
    clear_has_sonar();
  }
}


typedef boost::shared_ptr<gazebo::msgs::SonarStamped> SonarStampedPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

typedef const boost::shared_ptr<gazebo::msgs::SonarStamped const> ConstSonarStampedPtr;
// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sonar_5fstamped_2eproto__INCLUDED
