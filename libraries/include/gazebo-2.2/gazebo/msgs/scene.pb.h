// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scene.proto

#ifndef PROTOBUF_scene_2eproto__INCLUDED
#define PROTOBUF_scene_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "header.pb.h"
#include "color.pb.h"
#include "fog.pb.h"
#include "sky.pb.h"
#include "shadows.pb.h"
#include "visual.pb.h"
#include "pose.pb.h"
#include "light.pb.h"
#include "joint.pb.h"
#include "model.pb.h"
#pragma GCC system_header
#include <boost/shared_ptr.hpp>
#include "gazebo/msgs/MsgFactory.hh"
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_scene_2eproto();
void protobuf_AssignDesc_scene_2eproto();
void protobuf_ShutdownFile_scene_2eproto();

class Scene;

// ===================================================================

class Scene : public ::google::protobuf::Message {
 public:
  Scene();
  virtual ~Scene();

  Scene(const Scene& from);

  inline Scene& operator=(const Scene& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Scene& default_instance();

  void Swap(Scene* other);

  // implements Message ----------------------------------------------

  Scene* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Scene& from);
  void MergeFrom(const Scene& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .gazebo.msgs.Color ambient = 2;
  inline bool has_ambient() const;
  inline void clear_ambient();
  static const int kAmbientFieldNumber = 2;
  inline const ::gazebo::msgs::Color& ambient() const;
  inline ::gazebo::msgs::Color* mutable_ambient();
  inline ::gazebo::msgs::Color* release_ambient();
  inline void set_allocated_ambient(::gazebo::msgs::Color* ambient);

  // optional .gazebo.msgs.Color background = 3;
  inline bool has_background() const;
  inline void clear_background();
  static const int kBackgroundFieldNumber = 3;
  inline const ::gazebo::msgs::Color& background() const;
  inline ::gazebo::msgs::Color* mutable_background();
  inline ::gazebo::msgs::Color* release_background();
  inline void set_allocated_background(::gazebo::msgs::Color* background);

  // optional .gazebo.msgs.Sky sky = 4;
  inline bool has_sky() const;
  inline void clear_sky();
  static const int kSkyFieldNumber = 4;
  inline const ::gazebo::msgs::Sky& sky() const;
  inline ::gazebo::msgs::Sky* mutable_sky();
  inline ::gazebo::msgs::Sky* release_sky();
  inline void set_allocated_sky(::gazebo::msgs::Sky* sky);

  // optional bool shadows = 5 [default = true];
  inline bool has_shadows() const;
  inline void clear_shadows();
  static const int kShadowsFieldNumber = 5;
  inline bool shadows() const;
  inline void set_shadows(bool value);

  // optional .gazebo.msgs.Fog fog = 6;
  inline bool has_fog() const;
  inline void clear_fog();
  static const int kFogFieldNumber = 6;
  inline const ::gazebo::msgs::Fog& fog() const;
  inline ::gazebo::msgs::Fog* mutable_fog();
  inline ::gazebo::msgs::Fog* release_fog();
  inline void set_allocated_fog(::gazebo::msgs::Fog* fog);

  // optional bool grid = 7;
  inline bool has_grid() const;
  inline void clear_grid();
  static const int kGridFieldNumber = 7;
  inline bool grid() const;
  inline void set_grid(bool value);

  // repeated .gazebo.msgs.Model model = 8;
  inline int model_size() const;
  inline void clear_model();
  static const int kModelFieldNumber = 8;
  inline const ::gazebo::msgs::Model& model(int index) const;
  inline ::gazebo::msgs::Model* mutable_model(int index);
  inline ::gazebo::msgs::Model* add_model();
  inline const ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::Model >&
      model() const;
  inline ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::Model >*
      mutable_model();

  // repeated .gazebo.msgs.Light light = 9;
  inline int light_size() const;
  inline void clear_light();
  static const int kLightFieldNumber = 9;
  inline const ::gazebo::msgs::Light& light(int index) const;
  inline ::gazebo::msgs::Light* mutable_light(int index);
  inline ::gazebo::msgs::Light* add_light();
  inline const ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::Light >&
      light() const;
  inline ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::Light >*
      mutable_light();

  // repeated .gazebo.msgs.Joint joint = 10;
  inline int joint_size() const;
  inline void clear_joint();
  static const int kJointFieldNumber = 10;
  inline const ::gazebo::msgs::Joint& joint(int index) const;
  inline ::gazebo::msgs::Joint* mutable_joint(int index);
  inline ::gazebo::msgs::Joint* add_joint();
  inline const ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::Joint >&
      joint() const;
  inline ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::Joint >*
      mutable_joint();

  // @@protoc_insertion_point(class_scope:gazebo.msgs.Scene)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_ambient();
  inline void clear_has_ambient();
  inline void set_has_background();
  inline void clear_has_background();
  inline void set_has_sky();
  inline void clear_has_sky();
  inline void set_has_shadows();
  inline void clear_has_shadows();
  inline void set_has_fog();
  inline void clear_has_fog();
  inline void set_has_grid();
  inline void clear_has_grid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::gazebo::msgs::Color* ambient_;
  ::gazebo::msgs::Color* background_;
  ::gazebo::msgs::Sky* sky_;
  ::gazebo::msgs::Fog* fog_;
  ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::Model > model_;
  ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::Light > light_;
  ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::Joint > joint_;
  bool shadows_;
  bool grid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_scene_2eproto();
  friend void protobuf_AssignDesc_scene_2eproto();
  friend void protobuf_ShutdownFile_scene_2eproto();

  void InitAsDefaultInstance();
  static Scene* default_instance_;
};
// ===================================================================


// ===================================================================

// Scene

// required string name = 1;
inline bool Scene::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Scene::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Scene::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Scene::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Scene::name() const {
  return *name_;
}
inline void Scene::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Scene::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Scene::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Scene::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Scene::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Scene::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .gazebo.msgs.Color ambient = 2;
inline bool Scene::has_ambient() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Scene::set_has_ambient() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Scene::clear_has_ambient() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Scene::clear_ambient() {
  if (ambient_ != NULL) ambient_->::gazebo::msgs::Color::Clear();
  clear_has_ambient();
}
inline const ::gazebo::msgs::Color& Scene::ambient() const {
  return ambient_ != NULL ? *ambient_ : *default_instance_->ambient_;
}
inline ::gazebo::msgs::Color* Scene::mutable_ambient() {
  set_has_ambient();
  if (ambient_ == NULL) ambient_ = new ::gazebo::msgs::Color;
  return ambient_;
}
inline ::gazebo::msgs::Color* Scene::release_ambient() {
  clear_has_ambient();
  ::gazebo::msgs::Color* temp = ambient_;
  ambient_ = NULL;
  return temp;
}
inline void Scene::set_allocated_ambient(::gazebo::msgs::Color* ambient) {
  delete ambient_;
  ambient_ = ambient;
  if (ambient) {
    set_has_ambient();
  } else {
    clear_has_ambient();
  }
}

// optional .gazebo.msgs.Color background = 3;
inline bool Scene::has_background() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Scene::set_has_background() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Scene::clear_has_background() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Scene::clear_background() {
  if (background_ != NULL) background_->::gazebo::msgs::Color::Clear();
  clear_has_background();
}
inline const ::gazebo::msgs::Color& Scene::background() const {
  return background_ != NULL ? *background_ : *default_instance_->background_;
}
inline ::gazebo::msgs::Color* Scene::mutable_background() {
  set_has_background();
  if (background_ == NULL) background_ = new ::gazebo::msgs::Color;
  return background_;
}
inline ::gazebo::msgs::Color* Scene::release_background() {
  clear_has_background();
  ::gazebo::msgs::Color* temp = background_;
  background_ = NULL;
  return temp;
}
inline void Scene::set_allocated_background(::gazebo::msgs::Color* background) {
  delete background_;
  background_ = background;
  if (background) {
    set_has_background();
  } else {
    clear_has_background();
  }
}

// optional .gazebo.msgs.Sky sky = 4;
inline bool Scene::has_sky() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Scene::set_has_sky() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Scene::clear_has_sky() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Scene::clear_sky() {
  if (sky_ != NULL) sky_->::gazebo::msgs::Sky::Clear();
  clear_has_sky();
}
inline const ::gazebo::msgs::Sky& Scene::sky() const {
  return sky_ != NULL ? *sky_ : *default_instance_->sky_;
}
inline ::gazebo::msgs::Sky* Scene::mutable_sky() {
  set_has_sky();
  if (sky_ == NULL) sky_ = new ::gazebo::msgs::Sky;
  return sky_;
}
inline ::gazebo::msgs::Sky* Scene::release_sky() {
  clear_has_sky();
  ::gazebo::msgs::Sky* temp = sky_;
  sky_ = NULL;
  return temp;
}
inline void Scene::set_allocated_sky(::gazebo::msgs::Sky* sky) {
  delete sky_;
  sky_ = sky;
  if (sky) {
    set_has_sky();
  } else {
    clear_has_sky();
  }
}

// optional bool shadows = 5 [default = true];
inline bool Scene::has_shadows() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Scene::set_has_shadows() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Scene::clear_has_shadows() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Scene::clear_shadows() {
  shadows_ = true;
  clear_has_shadows();
}
inline bool Scene::shadows() const {
  return shadows_;
}
inline void Scene::set_shadows(bool value) {
  set_has_shadows();
  shadows_ = value;
}

// optional .gazebo.msgs.Fog fog = 6;
inline bool Scene::has_fog() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Scene::set_has_fog() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Scene::clear_has_fog() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Scene::clear_fog() {
  if (fog_ != NULL) fog_->::gazebo::msgs::Fog::Clear();
  clear_has_fog();
}
inline const ::gazebo::msgs::Fog& Scene::fog() const {
  return fog_ != NULL ? *fog_ : *default_instance_->fog_;
}
inline ::gazebo::msgs::Fog* Scene::mutable_fog() {
  set_has_fog();
  if (fog_ == NULL) fog_ = new ::gazebo::msgs::Fog;
  return fog_;
}
inline ::gazebo::msgs::Fog* Scene::release_fog() {
  clear_has_fog();
  ::gazebo::msgs::Fog* temp = fog_;
  fog_ = NULL;
  return temp;
}
inline void Scene::set_allocated_fog(::gazebo::msgs::Fog* fog) {
  delete fog_;
  fog_ = fog;
  if (fog) {
    set_has_fog();
  } else {
    clear_has_fog();
  }
}

// optional bool grid = 7;
inline bool Scene::has_grid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Scene::set_has_grid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Scene::clear_has_grid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Scene::clear_grid() {
  grid_ = false;
  clear_has_grid();
}
inline bool Scene::grid() const {
  return grid_;
}
inline void Scene::set_grid(bool value) {
  set_has_grid();
  grid_ = value;
}

// repeated .gazebo.msgs.Model model = 8;
inline int Scene::model_size() const {
  return model_.size();
}
inline void Scene::clear_model() {
  model_.Clear();
}
inline const ::gazebo::msgs::Model& Scene::model(int index) const {
  return model_.Get(index);
}
inline ::gazebo::msgs::Model* Scene::mutable_model(int index) {
  return model_.Mutable(index);
}
inline ::gazebo::msgs::Model* Scene::add_model() {
  return model_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::Model >&
Scene::model() const {
  return model_;
}
inline ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::Model >*
Scene::mutable_model() {
  return &model_;
}

// repeated .gazebo.msgs.Light light = 9;
inline int Scene::light_size() const {
  return light_.size();
}
inline void Scene::clear_light() {
  light_.Clear();
}
inline const ::gazebo::msgs::Light& Scene::light(int index) const {
  return light_.Get(index);
}
inline ::gazebo::msgs::Light* Scene::mutable_light(int index) {
  return light_.Mutable(index);
}
inline ::gazebo::msgs::Light* Scene::add_light() {
  return light_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::Light >&
Scene::light() const {
  return light_;
}
inline ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::Light >*
Scene::mutable_light() {
  return &light_;
}

// repeated .gazebo.msgs.Joint joint = 10;
inline int Scene::joint_size() const {
  return joint_.size();
}
inline void Scene::clear_joint() {
  joint_.Clear();
}
inline const ::gazebo::msgs::Joint& Scene::joint(int index) const {
  return joint_.Get(index);
}
inline ::gazebo::msgs::Joint* Scene::mutable_joint(int index) {
  return joint_.Mutable(index);
}
inline ::gazebo::msgs::Joint* Scene::add_joint() {
  return joint_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::Joint >&
Scene::joint() const {
  return joint_;
}
inline ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::Joint >*
Scene::mutable_joint() {
  return &joint_;
}


typedef boost::shared_ptr<gazebo::msgs::Scene> ScenePtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

typedef const boost::shared_ptr<gazebo::msgs::Scene const> ConstScenePtr;
// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_scene_2eproto__INCLUDED
