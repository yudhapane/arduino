// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: boxgeom.proto

#ifndef PROTOBUF_boxgeom_2eproto__INCLUDED
#define PROTOBUF_boxgeom_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "vector3d.pb.h"
#pragma GCC system_header
#include <boost/shared_ptr.hpp>
#include "gazebo/msgs/MsgFactory.hh"
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_boxgeom_2eproto();
void protobuf_AssignDesc_boxgeom_2eproto();
void protobuf_ShutdownFile_boxgeom_2eproto();

class BoxGeom;

// ===================================================================

class BoxGeom : public ::google::protobuf::Message {
 public:
  BoxGeom();
  virtual ~BoxGeom();

  BoxGeom(const BoxGeom& from);

  inline BoxGeom& operator=(const BoxGeom& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BoxGeom& default_instance();

  void Swap(BoxGeom* other);

  // implements Message ----------------------------------------------

  BoxGeom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BoxGeom& from);
  void MergeFrom(const BoxGeom& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .gazebo.msgs.Vector3d size = 1;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 1;
  inline const ::gazebo::msgs::Vector3d& size() const;
  inline ::gazebo::msgs::Vector3d* mutable_size();
  inline ::gazebo::msgs::Vector3d* release_size();
  inline void set_allocated_size(::gazebo::msgs::Vector3d* size);

  // @@protoc_insertion_point(class_scope:gazebo.msgs.BoxGeom)
 private:
  inline void set_has_size();
  inline void clear_has_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::gazebo::msgs::Vector3d* size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_boxgeom_2eproto();
  friend void protobuf_AssignDesc_boxgeom_2eproto();
  friend void protobuf_ShutdownFile_boxgeom_2eproto();

  void InitAsDefaultInstance();
  static BoxGeom* default_instance_;
};
// ===================================================================


// ===================================================================

// BoxGeom

// required .gazebo.msgs.Vector3d size = 1;
inline bool BoxGeom::has_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BoxGeom::set_has_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BoxGeom::clear_has_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BoxGeom::clear_size() {
  if (size_ != NULL) size_->::gazebo::msgs::Vector3d::Clear();
  clear_has_size();
}
inline const ::gazebo::msgs::Vector3d& BoxGeom::size() const {
  return size_ != NULL ? *size_ : *default_instance_->size_;
}
inline ::gazebo::msgs::Vector3d* BoxGeom::mutable_size() {
  set_has_size();
  if (size_ == NULL) size_ = new ::gazebo::msgs::Vector3d;
  return size_;
}
inline ::gazebo::msgs::Vector3d* BoxGeom::release_size() {
  clear_has_size();
  ::gazebo::msgs::Vector3d* temp = size_;
  size_ = NULL;
  return temp;
}
inline void BoxGeom::set_allocated_size(::gazebo::msgs::Vector3d* size) {
  delete size_;
  size_ = size;
  if (size) {
    set_has_size();
  } else {
    clear_has_size();
  }
}


typedef boost::shared_ptr<gazebo::msgs::BoxGeom> BoxGeomPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

typedef const boost::shared_ptr<gazebo::msgs::BoxGeom const> ConstBoxGeomPtr;
// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_boxgeom_2eproto__INCLUDED
