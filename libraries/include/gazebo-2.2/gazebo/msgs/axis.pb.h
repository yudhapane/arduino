// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: axis.proto

#ifndef PROTOBUF_axis_2eproto__INCLUDED
#define PROTOBUF_axis_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "vector3d.pb.h"
#pragma GCC system_header
#include <boost/shared_ptr.hpp>
#include "gazebo/msgs/MsgFactory.hh"
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_axis_2eproto();
void protobuf_AssignDesc_axis_2eproto();
void protobuf_ShutdownFile_axis_2eproto();

class Axis;

// ===================================================================

class Axis : public ::google::protobuf::Message {
 public:
  Axis();
  virtual ~Axis();

  Axis(const Axis& from);

  inline Axis& operator=(const Axis& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Axis& default_instance();

  void Swap(Axis* other);

  // implements Message ----------------------------------------------

  Axis* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Axis& from);
  void MergeFrom(const Axis& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .gazebo.msgs.Vector3d xyz = 1;
  inline bool has_xyz() const;
  inline void clear_xyz();
  static const int kXyzFieldNumber = 1;
  inline const ::gazebo::msgs::Vector3d& xyz() const;
  inline ::gazebo::msgs::Vector3d* mutable_xyz();
  inline ::gazebo::msgs::Vector3d* release_xyz();
  inline void set_allocated_xyz(::gazebo::msgs::Vector3d* xyz);

  // required double limit_lower = 2;
  inline bool has_limit_lower() const;
  inline void clear_limit_lower();
  static const int kLimitLowerFieldNumber = 2;
  inline double limit_lower() const;
  inline void set_limit_lower(double value);

  // required double limit_upper = 3;
  inline bool has_limit_upper() const;
  inline void clear_limit_upper();
  static const int kLimitUpperFieldNumber = 3;
  inline double limit_upper() const;
  inline void set_limit_upper(double value);

  // required double limit_effort = 4;
  inline bool has_limit_effort() const;
  inline void clear_limit_effort();
  static const int kLimitEffortFieldNumber = 4;
  inline double limit_effort() const;
  inline void set_limit_effort(double value);

  // required double limit_velocity = 5;
  inline bool has_limit_velocity() const;
  inline void clear_limit_velocity();
  static const int kLimitVelocityFieldNumber = 5;
  inline double limit_velocity() const;
  inline void set_limit_velocity(double value);

  // required double damping = 6;
  inline bool has_damping() const;
  inline void clear_damping();
  static const int kDampingFieldNumber = 6;
  inline double damping() const;
  inline void set_damping(double value);

  // required double friction = 7;
  inline bool has_friction() const;
  inline void clear_friction();
  static const int kFrictionFieldNumber = 7;
  inline double friction() const;
  inline void set_friction(double value);

  // @@protoc_insertion_point(class_scope:gazebo.msgs.Axis)
 private:
  inline void set_has_xyz();
  inline void clear_has_xyz();
  inline void set_has_limit_lower();
  inline void clear_has_limit_lower();
  inline void set_has_limit_upper();
  inline void clear_has_limit_upper();
  inline void set_has_limit_effort();
  inline void clear_has_limit_effort();
  inline void set_has_limit_velocity();
  inline void clear_has_limit_velocity();
  inline void set_has_damping();
  inline void clear_has_damping();
  inline void set_has_friction();
  inline void clear_has_friction();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::gazebo::msgs::Vector3d* xyz_;
  double limit_lower_;
  double limit_upper_;
  double limit_effort_;
  double limit_velocity_;
  double damping_;
  double friction_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_axis_2eproto();
  friend void protobuf_AssignDesc_axis_2eproto();
  friend void protobuf_ShutdownFile_axis_2eproto();

  void InitAsDefaultInstance();
  static Axis* default_instance_;
};
// ===================================================================


// ===================================================================

// Axis

// required .gazebo.msgs.Vector3d xyz = 1;
inline bool Axis::has_xyz() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Axis::set_has_xyz() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Axis::clear_has_xyz() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Axis::clear_xyz() {
  if (xyz_ != NULL) xyz_->::gazebo::msgs::Vector3d::Clear();
  clear_has_xyz();
}
inline const ::gazebo::msgs::Vector3d& Axis::xyz() const {
  return xyz_ != NULL ? *xyz_ : *default_instance_->xyz_;
}
inline ::gazebo::msgs::Vector3d* Axis::mutable_xyz() {
  set_has_xyz();
  if (xyz_ == NULL) xyz_ = new ::gazebo::msgs::Vector3d;
  return xyz_;
}
inline ::gazebo::msgs::Vector3d* Axis::release_xyz() {
  clear_has_xyz();
  ::gazebo::msgs::Vector3d* temp = xyz_;
  xyz_ = NULL;
  return temp;
}
inline void Axis::set_allocated_xyz(::gazebo::msgs::Vector3d* xyz) {
  delete xyz_;
  xyz_ = xyz;
  if (xyz) {
    set_has_xyz();
  } else {
    clear_has_xyz();
  }
}

// required double limit_lower = 2;
inline bool Axis::has_limit_lower() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Axis::set_has_limit_lower() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Axis::clear_has_limit_lower() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Axis::clear_limit_lower() {
  limit_lower_ = 0;
  clear_has_limit_lower();
}
inline double Axis::limit_lower() const {
  return limit_lower_;
}
inline void Axis::set_limit_lower(double value) {
  set_has_limit_lower();
  limit_lower_ = value;
}

// required double limit_upper = 3;
inline bool Axis::has_limit_upper() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Axis::set_has_limit_upper() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Axis::clear_has_limit_upper() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Axis::clear_limit_upper() {
  limit_upper_ = 0;
  clear_has_limit_upper();
}
inline double Axis::limit_upper() const {
  return limit_upper_;
}
inline void Axis::set_limit_upper(double value) {
  set_has_limit_upper();
  limit_upper_ = value;
}

// required double limit_effort = 4;
inline bool Axis::has_limit_effort() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Axis::set_has_limit_effort() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Axis::clear_has_limit_effort() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Axis::clear_limit_effort() {
  limit_effort_ = 0;
  clear_has_limit_effort();
}
inline double Axis::limit_effort() const {
  return limit_effort_;
}
inline void Axis::set_limit_effort(double value) {
  set_has_limit_effort();
  limit_effort_ = value;
}

// required double limit_velocity = 5;
inline bool Axis::has_limit_velocity() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Axis::set_has_limit_velocity() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Axis::clear_has_limit_velocity() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Axis::clear_limit_velocity() {
  limit_velocity_ = 0;
  clear_has_limit_velocity();
}
inline double Axis::limit_velocity() const {
  return limit_velocity_;
}
inline void Axis::set_limit_velocity(double value) {
  set_has_limit_velocity();
  limit_velocity_ = value;
}

// required double damping = 6;
inline bool Axis::has_damping() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Axis::set_has_damping() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Axis::clear_has_damping() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Axis::clear_damping() {
  damping_ = 0;
  clear_has_damping();
}
inline double Axis::damping() const {
  return damping_;
}
inline void Axis::set_damping(double value) {
  set_has_damping();
  damping_ = value;
}

// required double friction = 7;
inline bool Axis::has_friction() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Axis::set_has_friction() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Axis::clear_has_friction() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Axis::clear_friction() {
  friction_ = 0;
  clear_has_friction();
}
inline double Axis::friction() const {
  return friction_;
}
inline void Axis::set_friction(double value) {
  set_has_friction();
  friction_ = value;
}


typedef boost::shared_ptr<gazebo::msgs::Axis> AxisPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

typedef const boost::shared_ptr<gazebo::msgs::Axis const> ConstAxisPtr;
// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_axis_2eproto__INCLUDED
