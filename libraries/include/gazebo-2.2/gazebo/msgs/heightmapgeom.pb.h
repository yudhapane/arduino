// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: heightmapgeom.proto

#ifndef PROTOBUF_heightmapgeom_2eproto__INCLUDED
#define PROTOBUF_heightmapgeom_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "image.pb.h"
#include "vector3d.pb.h"
#pragma GCC system_header
#include <boost/shared_ptr.hpp>
#include "gazebo/msgs/MsgFactory.hh"
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_heightmapgeom_2eproto();
void protobuf_AssignDesc_heightmapgeom_2eproto();
void protobuf_ShutdownFile_heightmapgeom_2eproto();

class HeightmapGeom;
class HeightmapGeom_Texture;
class HeightmapGeom_Blend;

// ===================================================================

class HeightmapGeom_Texture : public ::google::protobuf::Message {
 public:
  HeightmapGeom_Texture();
  virtual ~HeightmapGeom_Texture();

  HeightmapGeom_Texture(const HeightmapGeom_Texture& from);

  inline HeightmapGeom_Texture& operator=(const HeightmapGeom_Texture& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeightmapGeom_Texture& default_instance();

  void Swap(HeightmapGeom_Texture* other);

  // implements Message ----------------------------------------------

  HeightmapGeom_Texture* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeightmapGeom_Texture& from);
  void MergeFrom(const HeightmapGeom_Texture& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string diffuse = 1;
  inline bool has_diffuse() const;
  inline void clear_diffuse();
  static const int kDiffuseFieldNumber = 1;
  inline const ::std::string& diffuse() const;
  inline void set_diffuse(const ::std::string& value);
  inline void set_diffuse(const char* value);
  inline void set_diffuse(const char* value, size_t size);
  inline ::std::string* mutable_diffuse();
  inline ::std::string* release_diffuse();
  inline void set_allocated_diffuse(::std::string* diffuse);

  // required string normal = 2;
  inline bool has_normal() const;
  inline void clear_normal();
  static const int kNormalFieldNumber = 2;
  inline const ::std::string& normal() const;
  inline void set_normal(const ::std::string& value);
  inline void set_normal(const char* value);
  inline void set_normal(const char* value, size_t size);
  inline ::std::string* mutable_normal();
  inline ::std::string* release_normal();
  inline void set_allocated_normal(::std::string* normal);

  // required double size = 3;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 3;
  inline double size() const;
  inline void set_size(double value);

  // @@protoc_insertion_point(class_scope:gazebo.msgs.HeightmapGeom.Texture)
 private:
  inline void set_has_diffuse();
  inline void clear_has_diffuse();
  inline void set_has_normal();
  inline void clear_has_normal();
  inline void set_has_size();
  inline void clear_has_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* diffuse_;
  ::std::string* normal_;
  double size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_heightmapgeom_2eproto();
  friend void protobuf_AssignDesc_heightmapgeom_2eproto();
  friend void protobuf_ShutdownFile_heightmapgeom_2eproto();

  void InitAsDefaultInstance();
  static HeightmapGeom_Texture* default_instance_;
};
// -------------------------------------------------------------------

class HeightmapGeom_Blend : public ::google::protobuf::Message {
 public:
  HeightmapGeom_Blend();
  virtual ~HeightmapGeom_Blend();

  HeightmapGeom_Blend(const HeightmapGeom_Blend& from);

  inline HeightmapGeom_Blend& operator=(const HeightmapGeom_Blend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeightmapGeom_Blend& default_instance();

  void Swap(HeightmapGeom_Blend* other);

  // implements Message ----------------------------------------------

  HeightmapGeom_Blend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeightmapGeom_Blend& from);
  void MergeFrom(const HeightmapGeom_Blend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double min_height = 1;
  inline bool has_min_height() const;
  inline void clear_min_height();
  static const int kMinHeightFieldNumber = 1;
  inline double min_height() const;
  inline void set_min_height(double value);

  // required double fade_dist = 2;
  inline bool has_fade_dist() const;
  inline void clear_fade_dist();
  static const int kFadeDistFieldNumber = 2;
  inline double fade_dist() const;
  inline void set_fade_dist(double value);

  // @@protoc_insertion_point(class_scope:gazebo.msgs.HeightmapGeom.Blend)
 private:
  inline void set_has_min_height();
  inline void clear_has_min_height();
  inline void set_has_fade_dist();
  inline void clear_has_fade_dist();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double min_height_;
  double fade_dist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_heightmapgeom_2eproto();
  friend void protobuf_AssignDesc_heightmapgeom_2eproto();
  friend void protobuf_ShutdownFile_heightmapgeom_2eproto();

  void InitAsDefaultInstance();
  static HeightmapGeom_Blend* default_instance_;
};
// -------------------------------------------------------------------

class HeightmapGeom : public ::google::protobuf::Message {
 public:
  HeightmapGeom();
  virtual ~HeightmapGeom();

  HeightmapGeom(const HeightmapGeom& from);

  inline HeightmapGeom& operator=(const HeightmapGeom& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeightmapGeom& default_instance();

  void Swap(HeightmapGeom* other);

  // implements Message ----------------------------------------------

  HeightmapGeom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeightmapGeom& from);
  void MergeFrom(const HeightmapGeom& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef HeightmapGeom_Texture Texture;
  typedef HeightmapGeom_Blend Blend;

  // accessors -------------------------------------------------------

  // optional .gazebo.msgs.Image image = 1;
  inline bool has_image() const;
  inline void clear_image();
  static const int kImageFieldNumber = 1;
  inline const ::gazebo::msgs::Image& image() const;
  inline ::gazebo::msgs::Image* mutable_image();
  inline ::gazebo::msgs::Image* release_image();
  inline void set_allocated_image(::gazebo::msgs::Image* image);

  // required .gazebo.msgs.Vector3d size = 2;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 2;
  inline const ::gazebo::msgs::Vector3d& size() const;
  inline ::gazebo::msgs::Vector3d* mutable_size();
  inline ::gazebo::msgs::Vector3d* release_size();
  inline void set_allocated_size(::gazebo::msgs::Vector3d* size);

  // optional .gazebo.msgs.Vector3d origin = 3;
  inline bool has_origin() const;
  inline void clear_origin();
  static const int kOriginFieldNumber = 3;
  inline const ::gazebo::msgs::Vector3d& origin() const;
  inline ::gazebo::msgs::Vector3d* mutable_origin();
  inline ::gazebo::msgs::Vector3d* release_origin();
  inline void set_allocated_origin(::gazebo::msgs::Vector3d* origin);

  // repeated float heights = 4;
  inline int heights_size() const;
  inline void clear_heights();
  static const int kHeightsFieldNumber = 4;
  inline float heights(int index) const;
  inline void set_heights(int index, float value);
  inline void add_heights(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      heights() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_heights();

  // optional int32 width = 5;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 5;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);

  // optional int32 height = 6;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 6;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);

  // repeated .gazebo.msgs.HeightmapGeom.Texture texture = 7;
  inline int texture_size() const;
  inline void clear_texture();
  static const int kTextureFieldNumber = 7;
  inline const ::gazebo::msgs::HeightmapGeom_Texture& texture(int index) const;
  inline ::gazebo::msgs::HeightmapGeom_Texture* mutable_texture(int index);
  inline ::gazebo::msgs::HeightmapGeom_Texture* add_texture();
  inline const ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::HeightmapGeom_Texture >&
      texture() const;
  inline ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::HeightmapGeom_Texture >*
      mutable_texture();

  // repeated .gazebo.msgs.HeightmapGeom.Blend blend = 8;
  inline int blend_size() const;
  inline void clear_blend();
  static const int kBlendFieldNumber = 8;
  inline const ::gazebo::msgs::HeightmapGeom_Blend& blend(int index) const;
  inline ::gazebo::msgs::HeightmapGeom_Blend* mutable_blend(int index);
  inline ::gazebo::msgs::HeightmapGeom_Blend* add_blend();
  inline const ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::HeightmapGeom_Blend >&
      blend() const;
  inline ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::HeightmapGeom_Blend >*
      mutable_blend();

  // optional bool use_terrain_paging = 9;
  inline bool has_use_terrain_paging() const;
  inline void clear_use_terrain_paging();
  static const int kUseTerrainPagingFieldNumber = 9;
  inline bool use_terrain_paging() const;
  inline void set_use_terrain_paging(bool value);

  // @@protoc_insertion_point(class_scope:gazebo.msgs.HeightmapGeom)
 private:
  inline void set_has_image();
  inline void clear_has_image();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_origin();
  inline void clear_has_origin();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_use_terrain_paging();
  inline void clear_has_use_terrain_paging();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::gazebo::msgs::Image* image_;
  ::gazebo::msgs::Vector3d* size_;
  ::gazebo::msgs::Vector3d* origin_;
  ::google::protobuf::RepeatedField< float > heights_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::HeightmapGeom_Texture > texture_;
  ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::HeightmapGeom_Blend > blend_;
  bool use_terrain_paging_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_heightmapgeom_2eproto();
  friend void protobuf_AssignDesc_heightmapgeom_2eproto();
  friend void protobuf_ShutdownFile_heightmapgeom_2eproto();

  void InitAsDefaultInstance();
  static HeightmapGeom* default_instance_;
};
// ===================================================================


// ===================================================================

// HeightmapGeom_Texture

// required string diffuse = 1;
inline bool HeightmapGeom_Texture::has_diffuse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeightmapGeom_Texture::set_has_diffuse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeightmapGeom_Texture::clear_has_diffuse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeightmapGeom_Texture::clear_diffuse() {
  if (diffuse_ != &::google::protobuf::internal::kEmptyString) {
    diffuse_->clear();
  }
  clear_has_diffuse();
}
inline const ::std::string& HeightmapGeom_Texture::diffuse() const {
  return *diffuse_;
}
inline void HeightmapGeom_Texture::set_diffuse(const ::std::string& value) {
  set_has_diffuse();
  if (diffuse_ == &::google::protobuf::internal::kEmptyString) {
    diffuse_ = new ::std::string;
  }
  diffuse_->assign(value);
}
inline void HeightmapGeom_Texture::set_diffuse(const char* value) {
  set_has_diffuse();
  if (diffuse_ == &::google::protobuf::internal::kEmptyString) {
    diffuse_ = new ::std::string;
  }
  diffuse_->assign(value);
}
inline void HeightmapGeom_Texture::set_diffuse(const char* value, size_t size) {
  set_has_diffuse();
  if (diffuse_ == &::google::protobuf::internal::kEmptyString) {
    diffuse_ = new ::std::string;
  }
  diffuse_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HeightmapGeom_Texture::mutable_diffuse() {
  set_has_diffuse();
  if (diffuse_ == &::google::protobuf::internal::kEmptyString) {
    diffuse_ = new ::std::string;
  }
  return diffuse_;
}
inline ::std::string* HeightmapGeom_Texture::release_diffuse() {
  clear_has_diffuse();
  if (diffuse_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = diffuse_;
    diffuse_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HeightmapGeom_Texture::set_allocated_diffuse(::std::string* diffuse) {
  if (diffuse_ != &::google::protobuf::internal::kEmptyString) {
    delete diffuse_;
  }
  if (diffuse) {
    set_has_diffuse();
    diffuse_ = diffuse;
  } else {
    clear_has_diffuse();
    diffuse_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string normal = 2;
inline bool HeightmapGeom_Texture::has_normal() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HeightmapGeom_Texture::set_has_normal() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HeightmapGeom_Texture::clear_has_normal() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HeightmapGeom_Texture::clear_normal() {
  if (normal_ != &::google::protobuf::internal::kEmptyString) {
    normal_->clear();
  }
  clear_has_normal();
}
inline const ::std::string& HeightmapGeom_Texture::normal() const {
  return *normal_;
}
inline void HeightmapGeom_Texture::set_normal(const ::std::string& value) {
  set_has_normal();
  if (normal_ == &::google::protobuf::internal::kEmptyString) {
    normal_ = new ::std::string;
  }
  normal_->assign(value);
}
inline void HeightmapGeom_Texture::set_normal(const char* value) {
  set_has_normal();
  if (normal_ == &::google::protobuf::internal::kEmptyString) {
    normal_ = new ::std::string;
  }
  normal_->assign(value);
}
inline void HeightmapGeom_Texture::set_normal(const char* value, size_t size) {
  set_has_normal();
  if (normal_ == &::google::protobuf::internal::kEmptyString) {
    normal_ = new ::std::string;
  }
  normal_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HeightmapGeom_Texture::mutable_normal() {
  set_has_normal();
  if (normal_ == &::google::protobuf::internal::kEmptyString) {
    normal_ = new ::std::string;
  }
  return normal_;
}
inline ::std::string* HeightmapGeom_Texture::release_normal() {
  clear_has_normal();
  if (normal_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = normal_;
    normal_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HeightmapGeom_Texture::set_allocated_normal(::std::string* normal) {
  if (normal_ != &::google::protobuf::internal::kEmptyString) {
    delete normal_;
  }
  if (normal) {
    set_has_normal();
    normal_ = normal;
  } else {
    clear_has_normal();
    normal_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required double size = 3;
inline bool HeightmapGeom_Texture::has_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HeightmapGeom_Texture::set_has_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HeightmapGeom_Texture::clear_has_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HeightmapGeom_Texture::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline double HeightmapGeom_Texture::size() const {
  return size_;
}
inline void HeightmapGeom_Texture::set_size(double value) {
  set_has_size();
  size_ = value;
}

// -------------------------------------------------------------------

// HeightmapGeom_Blend

// required double min_height = 1;
inline bool HeightmapGeom_Blend::has_min_height() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeightmapGeom_Blend::set_has_min_height() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeightmapGeom_Blend::clear_has_min_height() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeightmapGeom_Blend::clear_min_height() {
  min_height_ = 0;
  clear_has_min_height();
}
inline double HeightmapGeom_Blend::min_height() const {
  return min_height_;
}
inline void HeightmapGeom_Blend::set_min_height(double value) {
  set_has_min_height();
  min_height_ = value;
}

// required double fade_dist = 2;
inline bool HeightmapGeom_Blend::has_fade_dist() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HeightmapGeom_Blend::set_has_fade_dist() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HeightmapGeom_Blend::clear_has_fade_dist() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HeightmapGeom_Blend::clear_fade_dist() {
  fade_dist_ = 0;
  clear_has_fade_dist();
}
inline double HeightmapGeom_Blend::fade_dist() const {
  return fade_dist_;
}
inline void HeightmapGeom_Blend::set_fade_dist(double value) {
  set_has_fade_dist();
  fade_dist_ = value;
}

// -------------------------------------------------------------------

// HeightmapGeom

// optional .gazebo.msgs.Image image = 1;
inline bool HeightmapGeom::has_image() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeightmapGeom::set_has_image() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeightmapGeom::clear_has_image() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeightmapGeom::clear_image() {
  if (image_ != NULL) image_->::gazebo::msgs::Image::Clear();
  clear_has_image();
}
inline const ::gazebo::msgs::Image& HeightmapGeom::image() const {
  return image_ != NULL ? *image_ : *default_instance_->image_;
}
inline ::gazebo::msgs::Image* HeightmapGeom::mutable_image() {
  set_has_image();
  if (image_ == NULL) image_ = new ::gazebo::msgs::Image;
  return image_;
}
inline ::gazebo::msgs::Image* HeightmapGeom::release_image() {
  clear_has_image();
  ::gazebo::msgs::Image* temp = image_;
  image_ = NULL;
  return temp;
}
inline void HeightmapGeom::set_allocated_image(::gazebo::msgs::Image* image) {
  delete image_;
  image_ = image;
  if (image) {
    set_has_image();
  } else {
    clear_has_image();
  }
}

// required .gazebo.msgs.Vector3d size = 2;
inline bool HeightmapGeom::has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HeightmapGeom::set_has_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HeightmapGeom::clear_has_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HeightmapGeom::clear_size() {
  if (size_ != NULL) size_->::gazebo::msgs::Vector3d::Clear();
  clear_has_size();
}
inline const ::gazebo::msgs::Vector3d& HeightmapGeom::size() const {
  return size_ != NULL ? *size_ : *default_instance_->size_;
}
inline ::gazebo::msgs::Vector3d* HeightmapGeom::mutable_size() {
  set_has_size();
  if (size_ == NULL) size_ = new ::gazebo::msgs::Vector3d;
  return size_;
}
inline ::gazebo::msgs::Vector3d* HeightmapGeom::release_size() {
  clear_has_size();
  ::gazebo::msgs::Vector3d* temp = size_;
  size_ = NULL;
  return temp;
}
inline void HeightmapGeom::set_allocated_size(::gazebo::msgs::Vector3d* size) {
  delete size_;
  size_ = size;
  if (size) {
    set_has_size();
  } else {
    clear_has_size();
  }
}

// optional .gazebo.msgs.Vector3d origin = 3;
inline bool HeightmapGeom::has_origin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HeightmapGeom::set_has_origin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HeightmapGeom::clear_has_origin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HeightmapGeom::clear_origin() {
  if (origin_ != NULL) origin_->::gazebo::msgs::Vector3d::Clear();
  clear_has_origin();
}
inline const ::gazebo::msgs::Vector3d& HeightmapGeom::origin() const {
  return origin_ != NULL ? *origin_ : *default_instance_->origin_;
}
inline ::gazebo::msgs::Vector3d* HeightmapGeom::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) origin_ = new ::gazebo::msgs::Vector3d;
  return origin_;
}
inline ::gazebo::msgs::Vector3d* HeightmapGeom::release_origin() {
  clear_has_origin();
  ::gazebo::msgs::Vector3d* temp = origin_;
  origin_ = NULL;
  return temp;
}
inline void HeightmapGeom::set_allocated_origin(::gazebo::msgs::Vector3d* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
}

// repeated float heights = 4;
inline int HeightmapGeom::heights_size() const {
  return heights_.size();
}
inline void HeightmapGeom::clear_heights() {
  heights_.Clear();
}
inline float HeightmapGeom::heights(int index) const {
  return heights_.Get(index);
}
inline void HeightmapGeom::set_heights(int index, float value) {
  heights_.Set(index, value);
}
inline void HeightmapGeom::add_heights(float value) {
  heights_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
HeightmapGeom::heights() const {
  return heights_;
}
inline ::google::protobuf::RepeatedField< float >*
HeightmapGeom::mutable_heights() {
  return &heights_;
}

// optional int32 width = 5;
inline bool HeightmapGeom::has_width() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HeightmapGeom::set_has_width() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HeightmapGeom::clear_has_width() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HeightmapGeom::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 HeightmapGeom::width() const {
  return width_;
}
inline void HeightmapGeom::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
}

// optional int32 height = 6;
inline bool HeightmapGeom::has_height() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void HeightmapGeom::set_has_height() {
  _has_bits_[0] |= 0x00000020u;
}
inline void HeightmapGeom::clear_has_height() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void HeightmapGeom::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 HeightmapGeom::height() const {
  return height_;
}
inline void HeightmapGeom::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
}

// repeated .gazebo.msgs.HeightmapGeom.Texture texture = 7;
inline int HeightmapGeom::texture_size() const {
  return texture_.size();
}
inline void HeightmapGeom::clear_texture() {
  texture_.Clear();
}
inline const ::gazebo::msgs::HeightmapGeom_Texture& HeightmapGeom::texture(int index) const {
  return texture_.Get(index);
}
inline ::gazebo::msgs::HeightmapGeom_Texture* HeightmapGeom::mutable_texture(int index) {
  return texture_.Mutable(index);
}
inline ::gazebo::msgs::HeightmapGeom_Texture* HeightmapGeom::add_texture() {
  return texture_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::HeightmapGeom_Texture >&
HeightmapGeom::texture() const {
  return texture_;
}
inline ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::HeightmapGeom_Texture >*
HeightmapGeom::mutable_texture() {
  return &texture_;
}

// repeated .gazebo.msgs.HeightmapGeom.Blend blend = 8;
inline int HeightmapGeom::blend_size() const {
  return blend_.size();
}
inline void HeightmapGeom::clear_blend() {
  blend_.Clear();
}
inline const ::gazebo::msgs::HeightmapGeom_Blend& HeightmapGeom::blend(int index) const {
  return blend_.Get(index);
}
inline ::gazebo::msgs::HeightmapGeom_Blend* HeightmapGeom::mutable_blend(int index) {
  return blend_.Mutable(index);
}
inline ::gazebo::msgs::HeightmapGeom_Blend* HeightmapGeom::add_blend() {
  return blend_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::HeightmapGeom_Blend >&
HeightmapGeom::blend() const {
  return blend_;
}
inline ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::HeightmapGeom_Blend >*
HeightmapGeom::mutable_blend() {
  return &blend_;
}

// optional bool use_terrain_paging = 9;
inline bool HeightmapGeom::has_use_terrain_paging() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void HeightmapGeom::set_has_use_terrain_paging() {
  _has_bits_[0] |= 0x00000100u;
}
inline void HeightmapGeom::clear_has_use_terrain_paging() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void HeightmapGeom::clear_use_terrain_paging() {
  use_terrain_paging_ = false;
  clear_has_use_terrain_paging();
}
inline bool HeightmapGeom::use_terrain_paging() const {
  return use_terrain_paging_;
}
inline void HeightmapGeom::set_use_terrain_paging(bool value) {
  set_has_use_terrain_paging();
  use_terrain_paging_ = value;
}


typedef boost::shared_ptr<gazebo::msgs::HeightmapGeom> HeightmapGeomPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

typedef const boost::shared_ptr<gazebo::msgs::HeightmapGeom const> ConstHeightmapGeomPtr;
// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_heightmapgeom_2eproto__INCLUDED
