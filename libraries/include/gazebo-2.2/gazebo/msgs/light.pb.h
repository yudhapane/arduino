// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: light.proto

#ifndef PROTOBUF_light_2eproto__INCLUDED
#define PROTOBUF_light_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "header.pb.h"
#include "pose.pb.h"
#include "vector3d.pb.h"
#include "color.pb.h"
#pragma GCC system_header
#include <boost/shared_ptr.hpp>
#include "gazebo/msgs/MsgFactory.hh"
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_light_2eproto();
void protobuf_AssignDesc_light_2eproto();
void protobuf_ShutdownFile_light_2eproto();

class Light;

enum Light_LightType {
  Light_LightType_POINT = 1,
  Light_LightType_SPOT = 2,
  Light_LightType_DIRECTIONAL = 3
};
bool Light_LightType_IsValid(int value);
const Light_LightType Light_LightType_LightType_MIN = Light_LightType_POINT;
const Light_LightType Light_LightType_LightType_MAX = Light_LightType_DIRECTIONAL;
const int Light_LightType_LightType_ARRAYSIZE = Light_LightType_LightType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Light_LightType_descriptor();
inline const ::std::string& Light_LightType_Name(Light_LightType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Light_LightType_descriptor(), value);
}
inline bool Light_LightType_Parse(
    const ::std::string& name, Light_LightType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Light_LightType>(
    Light_LightType_descriptor(), name, value);
}
// ===================================================================

class Light : public ::google::protobuf::Message {
 public:
  Light();
  virtual ~Light();

  Light(const Light& from);

  inline Light& operator=(const Light& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Light& default_instance();

  void Swap(Light* other);

  // implements Message ----------------------------------------------

  Light* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Light& from);
  void MergeFrom(const Light& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Light_LightType LightType;
  static const LightType POINT = Light_LightType_POINT;
  static const LightType SPOT = Light_LightType_SPOT;
  static const LightType DIRECTIONAL = Light_LightType_DIRECTIONAL;
  static inline bool LightType_IsValid(int value) {
    return Light_LightType_IsValid(value);
  }
  static const LightType LightType_MIN =
    Light_LightType_LightType_MIN;
  static const LightType LightType_MAX =
    Light_LightType_LightType_MAX;
  static const int LightType_ARRAYSIZE =
    Light_LightType_LightType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LightType_descriptor() {
    return Light_LightType_descriptor();
  }
  static inline const ::std::string& LightType_Name(LightType value) {
    return Light_LightType_Name(value);
  }
  static inline bool LightType_Parse(const ::std::string& name,
      LightType* value) {
    return Light_LightType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .gazebo.msgs.Light.LightType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::gazebo::msgs::Light_LightType type() const;
  inline void set_type(::gazebo::msgs::Light_LightType value);

  // optional .gazebo.msgs.Pose pose = 3;
  inline bool has_pose() const;
  inline void clear_pose();
  static const int kPoseFieldNumber = 3;
  inline const ::gazebo::msgs::Pose& pose() const;
  inline ::gazebo::msgs::Pose* mutable_pose();
  inline ::gazebo::msgs::Pose* release_pose();
  inline void set_allocated_pose(::gazebo::msgs::Pose* pose);

  // optional .gazebo.msgs.Color diffuse = 4;
  inline bool has_diffuse() const;
  inline void clear_diffuse();
  static const int kDiffuseFieldNumber = 4;
  inline const ::gazebo::msgs::Color& diffuse() const;
  inline ::gazebo::msgs::Color* mutable_diffuse();
  inline ::gazebo::msgs::Color* release_diffuse();
  inline void set_allocated_diffuse(::gazebo::msgs::Color* diffuse);

  // optional .gazebo.msgs.Color specular = 5;
  inline bool has_specular() const;
  inline void clear_specular();
  static const int kSpecularFieldNumber = 5;
  inline const ::gazebo::msgs::Color& specular() const;
  inline ::gazebo::msgs::Color* mutable_specular();
  inline ::gazebo::msgs::Color* release_specular();
  inline void set_allocated_specular(::gazebo::msgs::Color* specular);

  // optional float attenuation_constant = 6;
  inline bool has_attenuation_constant() const;
  inline void clear_attenuation_constant();
  static const int kAttenuationConstantFieldNumber = 6;
  inline float attenuation_constant() const;
  inline void set_attenuation_constant(float value);

  // optional float attenuation_linear = 7;
  inline bool has_attenuation_linear() const;
  inline void clear_attenuation_linear();
  static const int kAttenuationLinearFieldNumber = 7;
  inline float attenuation_linear() const;
  inline void set_attenuation_linear(float value);

  // optional float attenuation_quadratic = 8;
  inline bool has_attenuation_quadratic() const;
  inline void clear_attenuation_quadratic();
  static const int kAttenuationQuadraticFieldNumber = 8;
  inline float attenuation_quadratic() const;
  inline void set_attenuation_quadratic(float value);

  // optional .gazebo.msgs.Vector3d direction = 9;
  inline bool has_direction() const;
  inline void clear_direction();
  static const int kDirectionFieldNumber = 9;
  inline const ::gazebo::msgs::Vector3d& direction() const;
  inline ::gazebo::msgs::Vector3d* mutable_direction();
  inline ::gazebo::msgs::Vector3d* release_direction();
  inline void set_allocated_direction(::gazebo::msgs::Vector3d* direction);

  // optional float range = 10;
  inline bool has_range() const;
  inline void clear_range();
  static const int kRangeFieldNumber = 10;
  inline float range() const;
  inline void set_range(float value);

  // optional bool cast_shadows = 11;
  inline bool has_cast_shadows() const;
  inline void clear_cast_shadows();
  static const int kCastShadowsFieldNumber = 11;
  inline bool cast_shadows() const;
  inline void set_cast_shadows(bool value);

  // optional float spot_inner_angle = 12;
  inline bool has_spot_inner_angle() const;
  inline void clear_spot_inner_angle();
  static const int kSpotInnerAngleFieldNumber = 12;
  inline float spot_inner_angle() const;
  inline void set_spot_inner_angle(float value);

  // optional float spot_outer_angle = 13;
  inline bool has_spot_outer_angle() const;
  inline void clear_spot_outer_angle();
  static const int kSpotOuterAngleFieldNumber = 13;
  inline float spot_outer_angle() const;
  inline void set_spot_outer_angle(float value);

  // optional float spot_falloff = 14;
  inline bool has_spot_falloff() const;
  inline void clear_spot_falloff();
  static const int kSpotFalloffFieldNumber = 14;
  inline float spot_falloff() const;
  inline void set_spot_falloff(float value);

  // @@protoc_insertion_point(class_scope:gazebo.msgs.Light)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_pose();
  inline void clear_has_pose();
  inline void set_has_diffuse();
  inline void clear_has_diffuse();
  inline void set_has_specular();
  inline void clear_has_specular();
  inline void set_has_attenuation_constant();
  inline void clear_has_attenuation_constant();
  inline void set_has_attenuation_linear();
  inline void clear_has_attenuation_linear();
  inline void set_has_attenuation_quadratic();
  inline void clear_has_attenuation_quadratic();
  inline void set_has_direction();
  inline void clear_has_direction();
  inline void set_has_range();
  inline void clear_has_range();
  inline void set_has_cast_shadows();
  inline void clear_has_cast_shadows();
  inline void set_has_spot_inner_angle();
  inline void clear_has_spot_inner_angle();
  inline void set_has_spot_outer_angle();
  inline void clear_has_spot_outer_angle();
  inline void set_has_spot_falloff();
  inline void clear_has_spot_falloff();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::gazebo::msgs::Pose* pose_;
  ::gazebo::msgs::Color* diffuse_;
  int type_;
  float attenuation_constant_;
  ::gazebo::msgs::Color* specular_;
  float attenuation_linear_;
  float attenuation_quadratic_;
  ::gazebo::msgs::Vector3d* direction_;
  float range_;
  bool cast_shadows_;
  float spot_inner_angle_;
  float spot_outer_angle_;
  float spot_falloff_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_light_2eproto();
  friend void protobuf_AssignDesc_light_2eproto();
  friend void protobuf_ShutdownFile_light_2eproto();

  void InitAsDefaultInstance();
  static Light* default_instance_;
};
// ===================================================================


// ===================================================================

// Light

// required string name = 1;
inline bool Light::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Light::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Light::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Light::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Light::name() const {
  return *name_;
}
inline void Light::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Light::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Light::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Light::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Light::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Light::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .gazebo.msgs.Light.LightType type = 2;
inline bool Light::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Light::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Light::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Light::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::gazebo::msgs::Light_LightType Light::type() const {
  return static_cast< ::gazebo::msgs::Light_LightType >(type_);
}
inline void Light::set_type(::gazebo::msgs::Light_LightType value) {
  assert(::gazebo::msgs::Light_LightType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .gazebo.msgs.Pose pose = 3;
inline bool Light::has_pose() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Light::set_has_pose() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Light::clear_has_pose() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Light::clear_pose() {
  if (pose_ != NULL) pose_->::gazebo::msgs::Pose::Clear();
  clear_has_pose();
}
inline const ::gazebo::msgs::Pose& Light::pose() const {
  return pose_ != NULL ? *pose_ : *default_instance_->pose_;
}
inline ::gazebo::msgs::Pose* Light::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) pose_ = new ::gazebo::msgs::Pose;
  return pose_;
}
inline ::gazebo::msgs::Pose* Light::release_pose() {
  clear_has_pose();
  ::gazebo::msgs::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline void Light::set_allocated_pose(::gazebo::msgs::Pose* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    set_has_pose();
  } else {
    clear_has_pose();
  }
}

// optional .gazebo.msgs.Color diffuse = 4;
inline bool Light::has_diffuse() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Light::set_has_diffuse() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Light::clear_has_diffuse() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Light::clear_diffuse() {
  if (diffuse_ != NULL) diffuse_->::gazebo::msgs::Color::Clear();
  clear_has_diffuse();
}
inline const ::gazebo::msgs::Color& Light::diffuse() const {
  return diffuse_ != NULL ? *diffuse_ : *default_instance_->diffuse_;
}
inline ::gazebo::msgs::Color* Light::mutable_diffuse() {
  set_has_diffuse();
  if (diffuse_ == NULL) diffuse_ = new ::gazebo::msgs::Color;
  return diffuse_;
}
inline ::gazebo::msgs::Color* Light::release_diffuse() {
  clear_has_diffuse();
  ::gazebo::msgs::Color* temp = diffuse_;
  diffuse_ = NULL;
  return temp;
}
inline void Light::set_allocated_diffuse(::gazebo::msgs::Color* diffuse) {
  delete diffuse_;
  diffuse_ = diffuse;
  if (diffuse) {
    set_has_diffuse();
  } else {
    clear_has_diffuse();
  }
}

// optional .gazebo.msgs.Color specular = 5;
inline bool Light::has_specular() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Light::set_has_specular() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Light::clear_has_specular() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Light::clear_specular() {
  if (specular_ != NULL) specular_->::gazebo::msgs::Color::Clear();
  clear_has_specular();
}
inline const ::gazebo::msgs::Color& Light::specular() const {
  return specular_ != NULL ? *specular_ : *default_instance_->specular_;
}
inline ::gazebo::msgs::Color* Light::mutable_specular() {
  set_has_specular();
  if (specular_ == NULL) specular_ = new ::gazebo::msgs::Color;
  return specular_;
}
inline ::gazebo::msgs::Color* Light::release_specular() {
  clear_has_specular();
  ::gazebo::msgs::Color* temp = specular_;
  specular_ = NULL;
  return temp;
}
inline void Light::set_allocated_specular(::gazebo::msgs::Color* specular) {
  delete specular_;
  specular_ = specular;
  if (specular) {
    set_has_specular();
  } else {
    clear_has_specular();
  }
}

// optional float attenuation_constant = 6;
inline bool Light::has_attenuation_constant() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Light::set_has_attenuation_constant() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Light::clear_has_attenuation_constant() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Light::clear_attenuation_constant() {
  attenuation_constant_ = 0;
  clear_has_attenuation_constant();
}
inline float Light::attenuation_constant() const {
  return attenuation_constant_;
}
inline void Light::set_attenuation_constant(float value) {
  set_has_attenuation_constant();
  attenuation_constant_ = value;
}

// optional float attenuation_linear = 7;
inline bool Light::has_attenuation_linear() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Light::set_has_attenuation_linear() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Light::clear_has_attenuation_linear() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Light::clear_attenuation_linear() {
  attenuation_linear_ = 0;
  clear_has_attenuation_linear();
}
inline float Light::attenuation_linear() const {
  return attenuation_linear_;
}
inline void Light::set_attenuation_linear(float value) {
  set_has_attenuation_linear();
  attenuation_linear_ = value;
}

// optional float attenuation_quadratic = 8;
inline bool Light::has_attenuation_quadratic() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Light::set_has_attenuation_quadratic() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Light::clear_has_attenuation_quadratic() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Light::clear_attenuation_quadratic() {
  attenuation_quadratic_ = 0;
  clear_has_attenuation_quadratic();
}
inline float Light::attenuation_quadratic() const {
  return attenuation_quadratic_;
}
inline void Light::set_attenuation_quadratic(float value) {
  set_has_attenuation_quadratic();
  attenuation_quadratic_ = value;
}

// optional .gazebo.msgs.Vector3d direction = 9;
inline bool Light::has_direction() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Light::set_has_direction() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Light::clear_has_direction() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Light::clear_direction() {
  if (direction_ != NULL) direction_->::gazebo::msgs::Vector3d::Clear();
  clear_has_direction();
}
inline const ::gazebo::msgs::Vector3d& Light::direction() const {
  return direction_ != NULL ? *direction_ : *default_instance_->direction_;
}
inline ::gazebo::msgs::Vector3d* Light::mutable_direction() {
  set_has_direction();
  if (direction_ == NULL) direction_ = new ::gazebo::msgs::Vector3d;
  return direction_;
}
inline ::gazebo::msgs::Vector3d* Light::release_direction() {
  clear_has_direction();
  ::gazebo::msgs::Vector3d* temp = direction_;
  direction_ = NULL;
  return temp;
}
inline void Light::set_allocated_direction(::gazebo::msgs::Vector3d* direction) {
  delete direction_;
  direction_ = direction;
  if (direction) {
    set_has_direction();
  } else {
    clear_has_direction();
  }
}

// optional float range = 10;
inline bool Light::has_range() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Light::set_has_range() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Light::clear_has_range() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Light::clear_range() {
  range_ = 0;
  clear_has_range();
}
inline float Light::range() const {
  return range_;
}
inline void Light::set_range(float value) {
  set_has_range();
  range_ = value;
}

// optional bool cast_shadows = 11;
inline bool Light::has_cast_shadows() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Light::set_has_cast_shadows() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Light::clear_has_cast_shadows() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Light::clear_cast_shadows() {
  cast_shadows_ = false;
  clear_has_cast_shadows();
}
inline bool Light::cast_shadows() const {
  return cast_shadows_;
}
inline void Light::set_cast_shadows(bool value) {
  set_has_cast_shadows();
  cast_shadows_ = value;
}

// optional float spot_inner_angle = 12;
inline bool Light::has_spot_inner_angle() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Light::set_has_spot_inner_angle() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Light::clear_has_spot_inner_angle() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Light::clear_spot_inner_angle() {
  spot_inner_angle_ = 0;
  clear_has_spot_inner_angle();
}
inline float Light::spot_inner_angle() const {
  return spot_inner_angle_;
}
inline void Light::set_spot_inner_angle(float value) {
  set_has_spot_inner_angle();
  spot_inner_angle_ = value;
}

// optional float spot_outer_angle = 13;
inline bool Light::has_spot_outer_angle() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Light::set_has_spot_outer_angle() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Light::clear_has_spot_outer_angle() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Light::clear_spot_outer_angle() {
  spot_outer_angle_ = 0;
  clear_has_spot_outer_angle();
}
inline float Light::spot_outer_angle() const {
  return spot_outer_angle_;
}
inline void Light::set_spot_outer_angle(float value) {
  set_has_spot_outer_angle();
  spot_outer_angle_ = value;
}

// optional float spot_falloff = 14;
inline bool Light::has_spot_falloff() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Light::set_has_spot_falloff() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Light::clear_has_spot_falloff() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Light::clear_spot_falloff() {
  spot_falloff_ = 0;
  clear_has_spot_falloff();
}
inline float Light::spot_falloff() const {
  return spot_falloff_;
}
inline void Light::set_spot_falloff(float value) {
  set_has_spot_falloff();
  spot_falloff_ = value;
}


typedef boost::shared_ptr<gazebo::msgs::Light> LightPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gazebo::msgs::Light_LightType>() {
  return ::gazebo::msgs::Light_LightType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

typedef const boost::shared_ptr<gazebo::msgs::Light const> ConstLightPtr;
// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_light_2eproto__INCLUDED
